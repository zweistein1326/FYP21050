{"ast":null,"code":"/* eslint linebreak-style: [\"error\", \"windows\"] */\n\n/* eslint-disable no-use-before-define */\nimport Latin1 from './Latin1.js';\n/**\r\n * UTF-8 encoding strategy.\r\n */\n\nconst Utf8 = {\n  /**\r\n     * Converts a word array to a UTF-8 string.\r\n     *\r\n     * @param {WordArray} wordArray The word array.\r\n     *\r\n     * @return {string} The UTF-8 string.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\r\n     */\n  stringify(wordArray) {\n    try {\n      return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n    } catch (e) {\n      throw new Error('Malformed UTF-8 data');\n    }\n  },\n\n  /**\r\n     * Converts a UTF-8 string to a word array.\r\n     *\r\n     * @param {string} utf8Str The UTF-8 string.\r\n     *\r\n     * @return {WordArray} The word array.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\r\n     */\n  parse(utf8Str) {\n    return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n  }\n\n};\nexport default Utf8;","map":{"version":3,"sources":["/Users/sid/Desktop/SSOB/sso/client/node_modules/react-native-hash/JSHash/lib/core/Utf8.js"],"names":["Latin1","Utf8","stringify","wordArray","decodeURIComponent","escape","e","Error","parse","utf8Str","unescape","encodeURIComponent"],"mappings":"AAAA;;AACA;AAEA,OAAOA,MAAP,MAAmB,aAAnB;AAEA;AACA;AACA;;AAEA,MAAMC,IAAI,GAAG;AACX;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,SAAS,CAACC,SAAD,EAAY;AACnB,QAAI;AACF,aAAOC,kBAAkB,CAACC,MAAM,CAACL,MAAM,CAACE,SAAP,CAAiBC,SAAjB,CAAD,CAAP,CAAzB;AACD,KAFD,CAEE,OAAOG,CAAP,EAAU;AACV,YAAM,IAAIC,KAAJ,CAAU,sBAAV,CAAN;AACD;AACF,GApBU;;AAsBX;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,KAAK,CAACC,OAAD,EAAU;AACb,WAAOT,MAAM,CAACQ,KAAP,CAAaE,QAAQ,CAACC,kBAAkB,CAACF,OAAD,CAAnB,CAArB,CAAP;AACD;;AArCU,CAAb;AAwCA,eAAeR,IAAf","sourcesContent":["/* eslint linebreak-style: [\"error\", \"windows\"] */\r\n/* eslint-disable no-use-before-define */\r\n\r\nimport Latin1 from './Latin1.js';\r\n\r\n/**\r\n * UTF-8 encoding strategy.\r\n */\r\n\r\nconst Utf8 = {\r\n  /**\r\n     * Converts a word array to a UTF-8 string.\r\n     *\r\n     * @param {WordArray} wordArray The word array.\r\n     *\r\n     * @return {string} The UTF-8 string.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\r\n     */\r\n  stringify(wordArray) {\r\n    try {\r\n      return decodeURIComponent(escape(Latin1.stringify(wordArray)));\r\n    } catch (e) {\r\n      throw new Error('Malformed UTF-8 data');\r\n    }\r\n  },\r\n\r\n  /**\r\n     * Converts a UTF-8 string to a word array.\r\n     *\r\n     * @param {string} utf8Str The UTF-8 string.\r\n     *\r\n     * @return {WordArray} The word array.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\r\n     */\r\n  parse(utf8Str) {\r\n    return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\r\n  },\r\n};\r\n\r\nexport default Utf8;\r\n"]},"metadata":{},"sourceType":"module"}