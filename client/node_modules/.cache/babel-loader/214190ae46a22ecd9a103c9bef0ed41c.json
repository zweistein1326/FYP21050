{"ast":null,"code":"/* eslint linebreak-style: [\"error\", \"windows\"] */\nimport Base from '../Base.js';\nimport WordArray from '../WordArray.js';\nconst X32WordArray = WordArray;\n/**\r\n * An array of 64-bit words.\r\n *\r\n * @property {Array} words The array of CryptoJS.x64.Word objects.\r\n * @property {number} sigBytes The number of significant bytes in this word array.\r\n */\n\nexport default class X64WordArray extends Base {\n  /**\r\n     * Initializes a newly created word array.\r\n     *\r\n     * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.\r\n     * @param {number} sigBytes (Optional) The number of significant bytes in the words.\r\n     *\r\n     * @example\r\n     *\r\n     *     var wordArray = CryptoJS.x64.WordArray.create();\r\n     *\r\n     *     var wordArray = CryptoJS.x64.WordArray.create([\r\n     *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\r\n     *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\r\n     *     ]);\r\n     *\r\n     *     var wordArray = CryptoJS.x64.WordArray.create([\r\n     *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\r\n     *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\r\n     *     ], 10);\r\n     */\n  constructor() {\n    let words = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let sigBytes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : words.length * 8;\n    super();\n    this.words = words;\n    this.sigBytes = sigBytes;\n  }\n  /**\r\n     * Converts this 64-bit word array to a 32-bit word array.\r\n     *\r\n     * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.\r\n     *\r\n     * @example\r\n     *\r\n     *     var x32WordArray = x64WordArray.toX32();\r\n     */\n\n\n  toX32() {\n    // Shortcuts\n    const x64Words = this.words;\n    const x64WordsLength = x64Words.length; // Convert\n\n    const x32Words = [];\n\n    for (let i = 0; i < x64WordsLength; i += 1) {\n      const x64Word = x64Words[i];\n      x32Words.push(x64Word.high);\n      x32Words.push(x64Word.low);\n    }\n\n    return X32WordArray.create(x32Words, this.sigBytes);\n  }\n  /**\r\n     * Creates a copy of this word array.\r\n     *\r\n     * @return {X64WordArray} The clone.\r\n     *\r\n     * @example\r\n     *\r\n     *     var clone = x64WordArray.clone();\r\n     */\n\n\n  clone() {\n    const clone = super.clone.call(this); // Clone \"words\" array\n\n    clone.words = this.words.slice(0);\n    const {\n      words\n    } = clone; // Clone each X64Word object\n\n    const wordsLength = words.length;\n\n    for (let i = 0; i < wordsLength; i += 1) {\n      words[i] = words[i].clone();\n    }\n\n    return clone;\n  }\n\n}","map":{"version":3,"sources":["/Users/sid/Desktop/SSOB/sso/client/node_modules/react-native-hash/JSHash/lib/core/x64-core/X64WordArray.js"],"names":["Base","WordArray","X32WordArray","X64WordArray","constructor","words","sigBytes","length","toX32","x64Words","x64WordsLength","x32Words","i","x64Word","push","high","low","create","clone","call","slice","wordsLength"],"mappings":"AAAA;AAEA,OAAOA,IAAP,MAAiB,YAAjB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AAEA,MAAMC,YAAY,GAAGD,SAArB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAME,YAAN,SAA2BH,IAA3B,CAAgC;AAC7C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEI,EAAAA,WAAW,GAA0C;AAAA,QAAzCC,KAAyC,uEAAjC,EAAiC;AAAA,QAA7BC,QAA6B,uEAAlBD,KAAK,CAACE,MAAN,GAAe,CAAG;AACnD;AAEA,SAAKF,KAAL,GAAaA,KAAb;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEE,EAAAA,KAAK,GAAG;AACN;AACA,UAAMC,QAAQ,GAAG,KAAKJ,KAAtB;AACA,UAAMK,cAAc,GAAGD,QAAQ,CAACF,MAAhC,CAHM,CAKN;;AACA,UAAMI,QAAQ,GAAG,EAAjB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,cAApB,EAAoCE,CAAC,IAAI,CAAzC,EAA4C;AAC1C,YAAMC,OAAO,GAAGJ,QAAQ,CAACG,CAAD,CAAxB;AACAD,MAAAA,QAAQ,CAACG,IAAT,CAAcD,OAAO,CAACE,IAAtB;AACAJ,MAAAA,QAAQ,CAACG,IAAT,CAAcD,OAAO,CAACG,GAAtB;AACD;;AAED,WAAOd,YAAY,CAACe,MAAb,CAAoBN,QAApB,EAA8B,KAAKL,QAAnC,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEY,EAAAA,KAAK,GAAG;AACN,UAAMA,KAAK,GAAG,MAAMA,KAAN,CAAYC,IAAZ,CAAiB,IAAjB,CAAd,CADM,CAGN;;AACAD,IAAAA,KAAK,CAACb,KAAN,GAAc,KAAKA,KAAL,CAAWe,KAAX,CAAiB,CAAjB,CAAd;AACA,UAAM;AAAEf,MAAAA;AAAF,QAAYa,KAAlB,CALM,CAON;;AACA,UAAMG,WAAW,GAAGhB,KAAK,CAACE,MAA1B;;AACA,SAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGS,WAApB,EAAiCT,CAAC,IAAI,CAAtC,EAAyC;AACvCP,MAAAA,KAAK,CAACO,CAAD,CAAL,GAAWP,KAAK,CAACO,CAAD,CAAL,CAASM,KAAT,EAAX;AACD;;AAED,WAAOA,KAAP;AACD;;AA5E4C","sourcesContent":["/* eslint linebreak-style: [\"error\", \"windows\"] */\r\n\r\nimport Base from '../Base.js';\r\nimport WordArray from '../WordArray.js';\r\n\r\nconst X32WordArray = WordArray;\r\n\r\n/**\r\n * An array of 64-bit words.\r\n *\r\n * @property {Array} words The array of CryptoJS.x64.Word objects.\r\n * @property {number} sigBytes The number of significant bytes in this word array.\r\n */\r\nexport default class X64WordArray extends Base {\r\n  /**\r\n     * Initializes a newly created word array.\r\n     *\r\n     * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.\r\n     * @param {number} sigBytes (Optional) The number of significant bytes in the words.\r\n     *\r\n     * @example\r\n     *\r\n     *     var wordArray = CryptoJS.x64.WordArray.create();\r\n     *\r\n     *     var wordArray = CryptoJS.x64.WordArray.create([\r\n     *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\r\n     *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\r\n     *     ]);\r\n     *\r\n     *     var wordArray = CryptoJS.x64.WordArray.create([\r\n     *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\r\n     *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\r\n     *     ], 10);\r\n     */\r\n  constructor(words = [], sigBytes = words.length * 8) {\r\n    super();\r\n\r\n    this.words = words;\r\n    this.sigBytes = sigBytes;\r\n  }\r\n\r\n  /**\r\n     * Converts this 64-bit word array to a 32-bit word array.\r\n     *\r\n     * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.\r\n     *\r\n     * @example\r\n     *\r\n     *     var x32WordArray = x64WordArray.toX32();\r\n     */\r\n  toX32() {\r\n    // Shortcuts\r\n    const x64Words = this.words;\r\n    const x64WordsLength = x64Words.length;\r\n\r\n    // Convert\r\n    const x32Words = [];\r\n    for (let i = 0; i < x64WordsLength; i += 1) {\r\n      const x64Word = x64Words[i];\r\n      x32Words.push(x64Word.high);\r\n      x32Words.push(x64Word.low);\r\n    }\r\n\r\n    return X32WordArray.create(x32Words, this.sigBytes);\r\n  }\r\n\r\n  /**\r\n     * Creates a copy of this word array.\r\n     *\r\n     * @return {X64WordArray} The clone.\r\n     *\r\n     * @example\r\n     *\r\n     *     var clone = x64WordArray.clone();\r\n     */\r\n  clone() {\r\n    const clone = super.clone.call(this);\r\n\r\n    // Clone \"words\" array\r\n    clone.words = this.words.slice(0);\r\n    const { words } = clone;\r\n\r\n    // Clone each X64Word object\r\n    const wordsLength = words.length;\r\n    for (let i = 0; i < wordsLength; i += 1) {\r\n      words[i] = words[i].clone();\r\n    }\r\n\r\n    return clone;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}