{"ast":null,"code":"/* eslint linebreak-style: [\"error\", \"windows\"] */\n\n/* eslint-disable no-use-before-define */\nimport Base from './Base.js';\nimport BufferedBlockAlgorithm from './BufferedBlockAlgorithm.js';\nimport HMAC from './HMAC.js';\n/**\r\n * Abstract hasher template.\r\n *\r\n * @property {number} blockSize\r\n *\r\n *     The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\r\n */\n\nexport default class Hasher extends BufferedBlockAlgorithm {\n  constructor(cfg) {\n    super();\n    this.blockSize = 512 / 32;\n    /**\r\n       * Configuration options.\r\n       */\n\n    this.cfg = Object.assign(new Base(), cfg); // Set initial values\n\n    this.reset();\n  }\n  /**\r\n     * Creates a shortcut function to a hasher's object interface.\r\n     *\r\n     * @param {Hasher} SubHasher The hasher to create a helper for.\r\n     *\r\n     * @return {Function} The shortcut function.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\r\n     */\n\n\n  static _createHelper(SubHasher) {\n    return (message, cfg) => new SubHasher(cfg).finalize(message);\n  }\n  /**\r\n     * Creates a shortcut function to the HMAC's object interface.\r\n     *\r\n     * @param {Hasher} SubHasher The hasher to use in this HMAC helper.\r\n     *\r\n     * @return {Function} The shortcut function.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\r\n     */\n\n\n  static _createHmacHelper(SubHasher) {\n    return (message, key) => new HMAC(SubHasher, key).finalize(message);\n  }\n  /**\r\n     * Resets this hasher to its initial state.\r\n     *\r\n     * @example\r\n     *\r\n     *     hasher.reset();\r\n     */\n\n\n  reset() {\n    // Reset data buffer\n    super.reset.call(this); // Perform concrete-hasher logic\n\n    this._doReset();\n  }\n  /**\r\n     * Updates this hasher with a message.\r\n     *\r\n     * @param {WordArray|string} messageUpdate The message to append.\r\n     *\r\n     * @return {Hasher} This hasher.\r\n     *\r\n     * @example\r\n     *\r\n     *     hasher.update('message');\r\n     *     hasher.update(wordArray);\r\n     */\n\n\n  update(messageUpdate) {\n    // Append\n    this._append(messageUpdate); // Update the hash\n\n\n    this._process(); // Chainable\n\n\n    return this;\n  }\n  /**\r\n     * Finalizes the hash computation.\r\n     * Note that the finalize operation is effectively a destructive, read-once operation.\r\n     *\r\n     * @param {WordArray|string} messageUpdate (Optional) A final message update.\r\n     *\r\n     * @return {WordArray} The hash.\r\n     *\r\n     * @example\r\n     *\r\n     *     var hash = hasher.finalize();\r\n     *     var hash = hasher.finalize('message');\r\n     *     var hash = hasher.finalize(wordArray);\r\n     */\n\n\n  finalize(messageUpdate) {\n    // Final message update\n    if (messageUpdate) {\n      this._append(messageUpdate);\n    } // Perform concrete-hasher logic\n\n\n    const hash = this._doFinalize();\n\n    return hash;\n  }\n\n}","map":{"version":3,"sources":["/Users/sid/Desktop/SSOB/sso/client/node_modules/react-native-hash/JSHash/lib/core/Hasher.js"],"names":["Base","BufferedBlockAlgorithm","HMAC","Hasher","constructor","cfg","blockSize","Object","assign","reset","_createHelper","SubHasher","message","finalize","_createHmacHelper","key","call","_doReset","update","messageUpdate","_append","_process","hash","_doFinalize"],"mappings":"AAAA;;AACA;AAEA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,sBAAP,MAAmC,6BAAnC;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,MAAN,SAAqBF,sBAArB,CAA4C;AACzDG,EAAAA,WAAW,CAACC,GAAD,EAAM;AACf;AAEA,SAAKC,SAAL,GAAiB,MAAM,EAAvB;AAEA;AACJ;AACA;;AACI,SAAKD,GAAL,GAAWE,MAAM,CAACC,MAAP,CAAc,IAAIR,IAAJ,EAAd,EAA0BK,GAA1B,CAAX,CARe,CAUf;;AACA,SAAKI,KAAL;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACsB,SAAbC,aAAa,CAACC,SAAD,EAAY;AAC9B,WAAO,CAACC,OAAD,EAAUP,GAAV,KAAkB,IAAIM,SAAJ,CAAcN,GAAd,EAAmBQ,QAAnB,CAA4BD,OAA5B,CAAzB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAC0B,SAAjBE,iBAAiB,CAACH,SAAD,EAAY;AAClC,WAAO,CAACC,OAAD,EAAUG,GAAV,KAAkB,IAAIb,IAAJ,CAASS,SAAT,EAAoBI,GAApB,EAAyBF,QAAzB,CAAkCD,OAAlC,CAAzB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEH,EAAAA,KAAK,GAAG;AACN;AACA,UAAMA,KAAN,CAAYO,IAAZ,CAAiB,IAAjB,EAFM,CAIN;;AACA,SAAKC,QAAL;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,MAAM,CAACC,aAAD,EAAgB;AACpB;AACA,SAAKC,OAAL,CAAaD,aAAb,EAFoB,CAIpB;;;AACA,SAAKE,QAAL,GALoB,CAOpB;;;AACA,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACER,EAAAA,QAAQ,CAACM,aAAD,EAAgB;AACtB;AACA,QAAIA,aAAJ,EAAmB;AACjB,WAAKC,OAAL,CAAaD,aAAb;AACD,KAJqB,CAMtB;;;AACA,UAAMG,IAAI,GAAG,KAAKC,WAAL,EAAb;;AAEA,WAAOD,IAAP;AACD;;AA/GwD","sourcesContent":["/* eslint linebreak-style: [\"error\", \"windows\"] */\r\n/* eslint-disable no-use-before-define */\r\n\r\nimport Base from './Base.js';\r\nimport BufferedBlockAlgorithm from './BufferedBlockAlgorithm.js';\r\nimport HMAC from './HMAC.js';\r\n\r\n/**\r\n * Abstract hasher template.\r\n *\r\n * @property {number} blockSize\r\n *\r\n *     The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\r\n */\r\nexport default class Hasher extends BufferedBlockAlgorithm {\r\n  constructor(cfg) {\r\n    super();\r\n\r\n    this.blockSize = 512 / 32;\r\n\r\n    /**\r\n       * Configuration options.\r\n       */\r\n    this.cfg = Object.assign(new Base(), cfg);\r\n\r\n    // Set initial values\r\n    this.reset();\r\n  }\r\n\r\n  /**\r\n     * Creates a shortcut function to a hasher's object interface.\r\n     *\r\n     * @param {Hasher} SubHasher The hasher to create a helper for.\r\n     *\r\n     * @return {Function} The shortcut function.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\r\n     */\r\n  static _createHelper(SubHasher) {\r\n    return (message, cfg) => new SubHasher(cfg).finalize(message);\r\n  }\r\n\r\n  /**\r\n     * Creates a shortcut function to the HMAC's object interface.\r\n     *\r\n     * @param {Hasher} SubHasher The hasher to use in this HMAC helper.\r\n     *\r\n     * @return {Function} The shortcut function.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\r\n     */\r\n  static _createHmacHelper(SubHasher) {\r\n    return (message, key) => new HMAC(SubHasher, key).finalize(message);\r\n  }\r\n\r\n  /**\r\n     * Resets this hasher to its initial state.\r\n     *\r\n     * @example\r\n     *\r\n     *     hasher.reset();\r\n     */\r\n  reset() {\r\n    // Reset data buffer\r\n    super.reset.call(this);\r\n\r\n    // Perform concrete-hasher logic\r\n    this._doReset();\r\n  }\r\n\r\n  /**\r\n     * Updates this hasher with a message.\r\n     *\r\n     * @param {WordArray|string} messageUpdate The message to append.\r\n     *\r\n     * @return {Hasher} This hasher.\r\n     *\r\n     * @example\r\n     *\r\n     *     hasher.update('message');\r\n     *     hasher.update(wordArray);\r\n     */\r\n  update(messageUpdate) {\r\n    // Append\r\n    this._append(messageUpdate);\r\n\r\n    // Update the hash\r\n    this._process();\r\n\r\n    // Chainable\r\n    return this;\r\n  }\r\n\r\n  /**\r\n     * Finalizes the hash computation.\r\n     * Note that the finalize operation is effectively a destructive, read-once operation.\r\n     *\r\n     * @param {WordArray|string} messageUpdate (Optional) A final message update.\r\n     *\r\n     * @return {WordArray} The hash.\r\n     *\r\n     * @example\r\n     *\r\n     *     var hash = hasher.finalize();\r\n     *     var hash = hasher.finalize('message');\r\n     *     var hash = hasher.finalize(wordArray);\r\n     */\r\n  finalize(messageUpdate) {\r\n    // Final message update\r\n    if (messageUpdate) {\r\n      this._append(messageUpdate);\r\n    }\r\n\r\n    // Perform concrete-hasher logic\r\n    const hash = this._doFinalize();\r\n\r\n    return hash;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}