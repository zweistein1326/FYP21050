{"ast":null,"code":"/* eslint linebreak-style: [\"error\", \"windows\"] */\n\n/* eslint-disable no-use-before-define */\nimport Hash from './lib/index.js';\nconst {\n  MD5,\n  SHA1,\n  SHA224,\n  SHA256,\n  SHA384,\n  SHA512,\n  SHA3,\n  format: {\n    Hex\n  }\n} = Hash;\n/**\r\n *\r\n * @param {string} string\r\n * @param {string} algorithm\r\n */\n\nconst hashString = async (string, algorithm) => {\n  switch (algorithm) {\n    case 'MD5':\n      {\n        const hash = await MD5(string);\n        return Hex.stringify(hash);\n      }\n\n    case 'SHA-1':\n      {\n        const hash = await SHA1(string);\n        return Hex.stringify(hash);\n      }\n\n    case 'SHA-256':\n      {\n        const hash = await SHA256(string);\n        return Hex.stringify(hash);\n      }\n\n    case 'SHA-224':\n      {\n        const hash = await SHA224(string);\n        return Hex.stringify(hash);\n      }\n\n    case 'SHA-512':\n      {\n        const hash = await SHA512(string);\n        return Hex.stringify(hash);\n      }\n\n    case 'SHA-384':\n      {\n        const hash = await SHA384(string);\n        return Hex.stringify(hash);\n      }\n\n    case 'keccak':\n      {\n        const hash = await SHA3(string);\n        return Hex.stringify(hash);\n      }\n\n    default:\n      throw new Error(`${algorithm} algorithm is not suported`);\n  }\n};\n\nexport default hashString;","map":{"version":3,"sources":["/Users/sid/Desktop/SSOB/sso/client/node_modules/react-native-hash/JSHash/JSHash.js"],"names":["Hash","MD5","SHA1","SHA224","SHA256","SHA384","SHA512","SHA3","format","Hex","hashString","string","algorithm","hash","stringify","Error"],"mappings":"AAAA;;AACA;AAEA,OAAOA,IAAP,MAAiB,gBAAjB;AAEA,MAAM;AACJC,EAAAA,GADI;AAEJC,EAAAA,IAFI;AAGJC,EAAAA,MAHI;AAIJC,EAAAA,MAJI;AAKJC,EAAAA,MALI;AAMJC,EAAAA,MANI;AAOJC,EAAAA,IAPI;AAQJC,EAAAA,MAAM,EAAE;AAAEC,IAAAA;AAAF;AARJ,IASFT,IATJ;AAWA;AACA;AACA;AACA;AACA;;AACA,MAAMU,UAAU,GAAG,OAAOC,MAAP,EAAeC,SAAf,KAA6B;AAC9C,UAAQA,SAAR;AACE,SAAK,KAAL;AAAY;AACV,cAAMC,IAAI,GAAG,MAAMZ,GAAG,CAACU,MAAD,CAAtB;AACA,eAAOF,GAAG,CAACK,SAAJ,CAAcD,IAAd,CAAP;AACD;;AACD,SAAK,OAAL;AAAc;AACZ,cAAMA,IAAI,GAAG,MAAMX,IAAI,CAACS,MAAD,CAAvB;AACA,eAAOF,GAAG,CAACK,SAAJ,CAAcD,IAAd,CAAP;AACD;;AACD,SAAK,SAAL;AAAgB;AACd,cAAMA,IAAI,GAAG,MAAMT,MAAM,CAACO,MAAD,CAAzB;AACA,eAAOF,GAAG,CAACK,SAAJ,CAAcD,IAAd,CAAP;AACD;;AACD,SAAK,SAAL;AAAgB;AACd,cAAMA,IAAI,GAAG,MAAMV,MAAM,CAACQ,MAAD,CAAzB;AACA,eAAOF,GAAG,CAACK,SAAJ,CAAcD,IAAd,CAAP;AACD;;AACD,SAAK,SAAL;AAAgB;AACd,cAAMA,IAAI,GAAG,MAAMP,MAAM,CAACK,MAAD,CAAzB;AACA,eAAOF,GAAG,CAACK,SAAJ,CAAcD,IAAd,CAAP;AACD;;AACD,SAAK,SAAL;AAAgB;AACd,cAAMA,IAAI,GAAG,MAAMR,MAAM,CAACM,MAAD,CAAzB;AACA,eAAOF,GAAG,CAACK,SAAJ,CAAcD,IAAd,CAAP;AACD;;AACD,SAAK,QAAL;AAAe;AACb,cAAMA,IAAI,GAAG,MAAMN,IAAI,CAACI,MAAD,CAAvB;AACA,eAAOF,GAAG,CAACK,SAAJ,CAAcD,IAAd,CAAP;AACD;;AACD;AACE,YAAM,IAAIE,KAAJ,CAAW,GAAEH,SAAU,4BAAvB,CAAN;AA9BJ;AAgCD,CAjCD;;AAmCA,eAAeF,UAAf","sourcesContent":["/* eslint linebreak-style: [\"error\", \"windows\"] */\r\n/* eslint-disable no-use-before-define */\r\n\r\nimport Hash from './lib/index.js';\r\n\r\nconst {\r\n  MD5,\r\n  SHA1,\r\n  SHA224,\r\n  SHA256,\r\n  SHA384,\r\n  SHA512,\r\n  SHA3,\r\n  format: { Hex },\r\n} = Hash;\r\n\r\n/**\r\n *\r\n * @param {string} string\r\n * @param {string} algorithm\r\n */\r\nconst hashString = async (string, algorithm) => {\r\n  switch (algorithm) {\r\n    case 'MD5': {\r\n      const hash = await MD5(string);\r\n      return Hex.stringify(hash);\r\n    }\r\n    case 'SHA-1': {\r\n      const hash = await SHA1(string);\r\n      return Hex.stringify(hash);\r\n    }\r\n    case 'SHA-256': {\r\n      const hash = await SHA256(string);\r\n      return Hex.stringify(hash);\r\n    }\r\n    case 'SHA-224': {\r\n      const hash = await SHA224(string);\r\n      return Hex.stringify(hash);\r\n    }\r\n    case 'SHA-512': {\r\n      const hash = await SHA512(string);\r\n      return Hex.stringify(hash);\r\n    }\r\n    case 'SHA-384': {\r\n      const hash = await SHA384(string);\r\n      return Hex.stringify(hash);\r\n    }\r\n    case 'keccak': {\r\n      const hash = await SHA3(string);\r\n      return Hex.stringify(hash);\r\n    }\r\n    default:\r\n      throw new Error(`${algorithm} algorithm is not suported`);\r\n  }\r\n};\r\n\r\nexport default hashString;\r\n"]},"metadata":{},"sourceType":"module"}