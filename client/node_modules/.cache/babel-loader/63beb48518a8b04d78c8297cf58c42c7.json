{"ast":null,"code":"/* eslint linebreak-style: [\"error\", \"windows\"] */\n\n/* eslint-disable no-use-before-define */\n\n/**\r\n * Base class for inheritance.\r\n */\nexport default class Base {\n  /**\r\n       * Extends this object and runs the init method.\r\n       * Arguments to create() will be passed to init().\r\n       * @return {Object} The new object.\r\n       * @static\r\n       * @example\r\n       *     var instance = MyType.create()\r\n       */\n  static create() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return new this(...args);\n  }\n  /**\r\n       * Copies properties into this object.\r\n       *\r\n       * @param {Object} properties The properties to mix in.\r\n       *\r\n       * @example\r\n       *\r\n       *     MyType.mixIn({\r\n       *         field: 'value'\r\n       *     })\r\n       */\n\n\n  mixIn(properties) {\n    return Object.assign(this, properties);\n  }\n  /**\r\n       * Creates a copy of this object.\r\n       *\r\n       * @return {Object} The clone.\r\n       *\r\n       * @example\r\n       *\r\n       *     var clone = instance.clone()\r\n       */\n\n\n  clone() {\n    const clone = new this.constructor();\n    Object.assign(clone, this);\n    return clone;\n  }\n\n}","map":{"version":3,"sources":["/Users/sid/Desktop/SSOB/sso/client/node_modules/react-native-hash/JSHash/lib/core/Base.js"],"names":["Base","create","args","mixIn","properties","Object","assign","clone","constructor"],"mappings":"AAAA;;AACA;;AAEA;AACA;AACA;AACA,eAAe,MAAMA,IAAN,CAAW;AACxB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAANC,MAAM,GAAU;AAAA,sCAANC,IAAM;AAANA,MAAAA,IAAM;AAAA;;AACrB,WAAO,IAAI,IAAJ,CAAS,GAAGA,IAAZ,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,KAAK,CAACC,UAAD,EAAa;AAChB,WAAOC,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoBF,UAApB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEG,EAAAA,KAAK,GAAG;AACN,UAAMA,KAAK,GAAG,IAAI,KAAKC,WAAT,EAAd;AACAH,IAAAA,MAAM,CAACC,MAAP,CAAcC,KAAd,EAAqB,IAArB;AACA,WAAOA,KAAP;AACD;;AAzCuB","sourcesContent":["/* eslint linebreak-style: [\"error\", \"windows\"] */\r\n/* eslint-disable no-use-before-define */\r\n\r\n/**\r\n * Base class for inheritance.\r\n */\r\nexport default class Base {\r\n  /**\r\n       * Extends this object and runs the init method.\r\n       * Arguments to create() will be passed to init().\r\n       * @return {Object} The new object.\r\n       * @static\r\n       * @example\r\n       *     var instance = MyType.create()\r\n       */\r\n  static create(...args) {\r\n    return new this(...args);\r\n  }\r\n\r\n  /**\r\n       * Copies properties into this object.\r\n       *\r\n       * @param {Object} properties The properties to mix in.\r\n       *\r\n       * @example\r\n       *\r\n       *     MyType.mixIn({\r\n       *         field: 'value'\r\n       *     })\r\n       */\r\n  mixIn(properties) {\r\n    return Object.assign(this, properties);\r\n  }\r\n\r\n  /**\r\n       * Creates a copy of this object.\r\n       *\r\n       * @return {Object} The clone.\r\n       *\r\n       * @example\r\n       *\r\n       *     var clone = instance.clone()\r\n       */\r\n  clone() {\r\n    const clone = new this.constructor();\r\n    Object.assign(clone, this);\r\n    return clone;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}