{"ast":null,"code":"var _jsxFileName = \"/Users/sid/Desktop/projects/FYP21050/client/src/pages/Home.tsx\",\n    _s = $RefreshSig$();\n\nimport { useMutation } from '@apollo/client';\nimport { Box } from '@mui/material';\nimport { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { useParams } from 'react-router-dom';\nimport Header from '../components/Header';\nimport { GETUSERBYID } from '../graphql';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Home = props => {\n  _s();\n\n  const navigate = useNavigate();\n  const [loggedIn, setLoggedIn] = useState(props.auth.user !== null);\n  const [activeUser, setActiveUser] = useState({});\n  const [activeCredentials, setActiveCredentials] = useState([]);\n  const [fetchInfo, {\n    loading,\n    error\n  }] = useMutation(GETUSERBYID);\n  const [account, setAccount] = useState(null);\n\n  const handleLogout = () => {\n    localStorage.removeItem('token');\n    setLoggedIn(false);\n  };\n\n  const {\n    id\n  } = useParams();\n  const {\n    ethereum\n  } = window;\n\n  const connectWalletHandler = async () => {\n    try {\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      setAccount(accounts[0]);\n    } catch (err) {\n      console.log(err);\n    }\n  }; // const getUserInfo = async () =>{\n  //   console.log(id);\n  //   await connectWalletHandler();\n  //   fetchInfo({\n  //     variables: {\n  //       id\n  //   },\n  // })\n  //   .then((res)=>{\n  //     let user:User = res.data.getUserById.user;\n  //     setActiveUser(user);\n  //     const credArray:any = [];\n  //     if(user.credentials){\n  //       Object.values(user.credentials).forEach((credential, index) => credential.status? credArray.push(credential):null)\n  //     }\n  //     console.log(credArray);\n  //     setActiveCredentials(credArray);\n  //   })\n  // }\n  // useEffect(()=>{ \n  //   getUserInfo()\n  // },activeUser);\n\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      children: [\"User information\", /*#__PURE__*/_jsxDEV(Header, {\n        setLoggedIn: setLoggedIn,\n        loggedIn: loggedIn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Home, \"IB1IF52sz62+JtBNaE/pIm796L4=\", false, function () {\n  return [useNavigate, useMutation, useParams];\n});\n\n_c = Home;\n\nconst mapStateToProps = state => ({\n  auth: state.auth\n});\n\nexport default connect(mapStateToProps)(Home);\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/sid/Desktop/projects/FYP21050/client/src/pages/Home.tsx"],"names":["useMutation","Box","useState","connect","useNavigate","useParams","Header","GETUSERBYID","Home","props","navigate","loggedIn","setLoggedIn","auth","user","activeUser","setActiveUser","activeCredentials","setActiveCredentials","fetchInfo","loading","error","account","setAccount","handleLogout","localStorage","removeItem","id","ethereum","window","connectWalletHandler","accounts","request","method","err","console","log","mapStateToProps","state"],"mappings":";;;AAAA,SAASA,WAAT,QAA4B,gBAA5B;AACA,SAASC,GAAT,QAAwC,eAAxC;AACA,SAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAAeC,SAAf,QAAgC,kBAAhC;AAEA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,WAAT,QAA4B,YAA5B;;;AAIA,MAAMC,IAAI,GAAIC,KAAD,IAAe;AAAA;;AAC1B,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;AACA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CACtCO,KAAK,CAACI,IAAN,CAAWC,IAAX,KAAmB,IADmB,CAAxC;AAGA,QAAM,CAACC,UAAD,EAAYC,aAAZ,IAA6Bd,QAAQ,CAAM,EAAN,CAA3C;AACA,QAAM,CAACe,iBAAD,EAAmBC,oBAAnB,IAA2ChB,QAAQ,CAAM,EAAN,CAAzD;AACA,QAAM,CAACiB,SAAD,EAAW;AAACC,IAAAA,OAAD;AAASC,IAAAA;AAAT,GAAX,IAA8BrB,WAAW,CAACO,WAAD,CAA/C;AACA,QAAM,CAACe,OAAD,EAAUC,UAAV,IAAwBrB,QAAQ,CAAM,IAAN,CAAtC;;AAEA,QAAMsB,YAAY,GAAG,MAAM;AACzBC,IAAAA,YAAY,CAACC,UAAb,CAAwB,OAAxB;AACAd,IAAAA,WAAW,CAAC,KAAD,CAAX;AACD,GAHD;;AAKA,QAAM;AAACe,IAAAA;AAAD,MAAOtB,SAAS,EAAtB;AAEA,QAAM;AAACuB,IAAAA;AAAD,MAAaC,MAAnB;;AAEA,QAAMC,oBAAoB,GAAG,YAAY;AACvC,QAAG;AACD,YAAMC,QAAQ,GAAG,MAAMH,QAAQ,CAACI,OAAT,CAAiB;AAACC,QAAAA,MAAM,EAAE;AAAT,OAAjB,CAAvB;AACAV,MAAAA,UAAU,CAACQ,QAAQ,CAAC,CAAD,CAAT,CAAV;AACD,KAHD,CAGE,OAAMG,GAAN,EAAU;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF,GAPD,CAnB0B,CA4B1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AAGA,sBACE,QAAC,GAAD;AAAA,2BACA,QAAC,GAAD;AAAA,kDAEE,QAAC,MAAD;AAAQ,QAAA,WAAW,EAAEtB,WAArB;AAAkC,QAAA,QAAQ,EAAED;AAA5C;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UADF;AA8DD,CAnHD;;GAAMH,I;UACaJ,W,EAMmBJ,W,EAQvBK,S;;;KAfTG,I;;AAqHN,MAAM6B,eAAe,GAAIC,KAAD,KAAgB;AACtCzB,EAAAA,IAAI,EAACyB,KAAK,CAACzB;AAD2B,CAAhB,CAAxB;;AAIA,eAAeV,OAAO,CAACkC,eAAD,CAAP,CAAyB7B,IAAzB,CAAf","sourcesContent":["import { useMutation } from '@apollo/client';\nimport { Box, Button, Typography } from '@mui/material';\nimport { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { Link, useParams } from 'react-router-dom';\nimport CredentialTile from '../components/CredentialTile';\nimport Header from '../components/Header';\nimport { GETUSERBYID } from '../graphql';\nimport { User } from '../models/User';\ndeclare var window:any;\n\nconst Home = (props:any) => {\n  const navigate = useNavigate();\n  const [loggedIn, setLoggedIn] = useState(\n    props.auth.user !==null ,\n  );\n  const [activeUser,setActiveUser] = useState<any>({});\n  const [activeCredentials,setActiveCredentials] = useState<any>([]);\n  const [fetchInfo,{loading,error}] = useMutation(GETUSERBYID);\n  const [account, setAccount] = useState<any>(null);\n  \n  const handleLogout = () => {\n    localStorage.removeItem('token');\n    setLoggedIn(false);\n  };\n  \n  const {id} = useParams();\n\n  const {ethereum} = window;\n\n  const connectWalletHandler = async () => {\n    try{\n      const accounts = await ethereum.request({method: 'eth_requestAccounts'});\n      setAccount(accounts[0]);\n    } catch(err){\n      console.log(err);\n    }\n  }\n\n  // const getUserInfo = async () =>{\n  //   console.log(id);\n  //   await connectWalletHandler();\n  //   fetchInfo({\n  //     variables: {\n  //       id\n  //   },\n  // })\n  //   .then((res)=>{\n  //     let user:User = res.data.getUserById.user;\n  //     setActiveUser(user);\n  //     const credArray:any = [];\n  //     if(user.credentials){\n  //       Object.values(user.credentials).forEach((credential, index) => credential.status? credArray.push(credential):null)\n  //     }\n  //     console.log(credArray);\n  //     setActiveCredentials(credArray);\n  //   })\n  // }\n\n  // useEffect(()=>{ \n  //   getUserInfo()\n  // },activeUser);\n\n\n  return (\n    <Box>\n    <Box >\n    User information\n      <Header setLoggedIn={setLoggedIn} loggedIn={loggedIn}/>\n    </Box>\n    {/* <Box sx={{display:'flex'}}>\n    <Box sx={{width:'20vw', height:'100vh', mt:2, backgroundColor:'beige', p:3}}>\n      <Typography>\n          My photo (optional)\n        </Typography>\n        <Typography sx={{display:'inline'}}>\n          DID: <span style={{fontWeight:'bold'}}>{activeUser.id} (@{activeUser.username})</span>\n        </Typography>\n        <Typography>\n          Name: {activeUser.firstname} {activeUser.lastname}\n        </Typography>\n        <Typography>\n          Email: {activeUser.email}\n        </Typography>\n        <Button sx={{ mt:3, mb:2 }} variant=\"contained\"><Link to={`/addCredential`}><Typography sx={{color:'white'}}>Add new Credential</Typography></Link></Button>\n        <Button sx={{ mt:3, mb:2 }} variant=\"contained\"><Link to={`/requestCredential`}><Typography sx={{color:'white'}}>Request Credential</Typography></Link></Button>\n    </Box>\n      <Box sx={{width:'60vw', height:'100vh', m:3}}>\n      {loggedIn ?\n      <>\n        {activeUser.id == props.auth.user.id?\n        <Box display='flex'>\n          <Box sx={{width:'30%'}}>\n          <Typography variant=\"h4\" >\n            Issued Credentials\n          </Typography>\n          <Typography >\n            Show credential issued by this user -&gt; View all\n          </Typography>\n          {activeUser.credentials ?\n          activeCredentials.map((credential:any,index:number)=>credential.pending?<CredentialTile key={credential.id} credential={credential} title={activeCredentials[index].id} />:null)\n          :''}\n          </Box>\n          <Box sx={{width:'30%'}}>\n          <Typography variant=\"h4\" >\n            Pending Requests\n          </Typography>\n          {activeUser.credentials ?\n          activeCredentials.map((credential:any,index:number)=>credential.pending?<CredentialTile key={credential.id} credential={credential} title={activeCredentials[index].id} />:null)\n          :''}\n          </Box>\n          <Box sx={{width:'30%'}}>\n          <Typography variant=\"h4\">\n            Accepted credentials\n          </Typography>\n          {activeUser.credentials ?\n          activeCredentials.map((credential:any,index:number)=>!credential.pending?<CredentialTile key={credential.id} credential={credential} title={activeCredentials[index].id} />:null)\n          :''}\n          </Box>\n        </Box>:\n        null}\n      </>: null}\n      </Box>\n      </Box> */}\n    </Box>\n  );\n};\n\nconst mapStateToProps = (state:any) => ({\n  auth:state.auth\n})\n\nexport default connect(mapStateToProps)(Home);\n"]},"metadata":{},"sourceType":"module"}