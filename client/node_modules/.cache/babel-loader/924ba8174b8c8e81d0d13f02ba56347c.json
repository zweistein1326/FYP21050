{"ast":null,"code":"/* eslint linebreak-style: [\"error\", \"windows\"] */\n\n/* eslint-disable no-use-before-define */\nimport Base from './Base.js';\nimport Hex from './Hex.js';\n/**\r\n * An array of 32-bit words.\r\n *\r\n * @property {Array} words The array of 32-bit words.\r\n * @property {number} sigBytes The number of significant bytes in this word array.\r\n */\n\nexport default class WordArray extends Base {\n  /**\r\n     * Initializes a newly created word array.\r\n     *\r\n     * @param {Array} words (Optional) An array of 32-bit words.\r\n     * @param {number} sigBytes (Optional) The number of significant bytes in the words.\r\n     *\r\n     * @example\r\n     *\r\n     *     var wordArray = CryptoJS.lib.WordArray.create();\r\n     *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\r\n     *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\r\n     */\n  constructor() {\n    let words = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let sigBytes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : words.length * 4;\n    super();\n    let typedArray = words; // Convert buffers to uint8\n\n    if (typedArray instanceof ArrayBuffer) {\n      typedArray = new Uint8Array(typedArray);\n    } // Convert other array views to uint8\n\n\n    if (typedArray instanceof Int8Array || typedArray instanceof Uint8ClampedArray || typedArray instanceof Int16Array || typedArray instanceof Uint16Array || typedArray instanceof Int32Array || typedArray instanceof Uint32Array || typedArray instanceof Float32Array || typedArray instanceof Float64Array) {\n      typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);\n    } // Handle Uint8Array\n\n\n    if (typedArray instanceof Uint8Array) {\n      // Shortcut\n      const typedArrayByteLength = typedArray.byteLength; // Extract bytes\n\n      const _words = [];\n\n      for (let i = 0; i < typedArrayByteLength; i += 1) {\n        _words[i >>> 2] |= typedArray[i] << 24 - i % 4 * 8;\n      } // Initialize this word array\n\n\n      this.words = _words;\n      this.sigBytes = typedArrayByteLength;\n    } else {\n      // Else call normal init\n      this.words = words;\n      this.sigBytes = sigBytes;\n    }\n  }\n  /**\r\n     * Creates a word array filled with random bytes.\r\n     *\r\n     * @param {number} nBytes The number of random bytes to generate.\r\n     *\r\n     * @return {WordArray} The random word array.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var wordArray = CryptoJS.lib.WordArray.random(16);\r\n     */\n\n\n  static random(nBytes) {\n    const words = [];\n\n    const r = m_w => {\n      let _m_w = m_w;\n      let _m_z = 0x3ade68b1;\n      const mask = 0xffffffff;\n      return () => {\n        _m_z = 0x9069 * (_m_z & 0xffff) + (_m_z >> 0x10) & mask;\n        _m_w = 0x4650 * (_m_w & 0xffff) + (_m_w >> 0x10) & mask;\n        let result = (_m_z << 0x10) + _m_w & mask;\n        result /= 0x100000000;\n        result += 0.5;\n        return result * (Math.random() > 0.5 ? 1 : -1);\n      };\n    };\n\n    for (let i = 0, rcache; i < nBytes; i += 4) {\n      const _r = r((rcache || Math.random()) * 0x100000000);\n\n      rcache = _r() * 0x3ade67b7;\n      words.push(_r() * 0x100000000 | 0);\n    }\n\n    return new WordArray(words, nBytes);\n  }\n  /**\r\n     * Converts this word array to a string.\r\n     *\r\n     * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\r\n     *\r\n     * @return {string} The stringified word array.\r\n     *\r\n     * @example\r\n     *\r\n     *     var string = wordArray + '';\r\n     *     var string = wordArray.toString();\r\n     *     var string = wordArray.toString(CryptoJS.enc.Utf8);\r\n     */\n\n\n  toString() {\n    let encoder = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Hex;\n    return encoder.stringify(this);\n  }\n  /**\r\n     * Concatenates a word array to this word array.\r\n     *\r\n     * @param {WordArray} wordArray The word array to append.\r\n     *\r\n     * @return {WordArray} This word array.\r\n     *\r\n     * @example\r\n     *\r\n     *     wordArray1.concat(wordArray2);\r\n     */\n\n\n  concat(wordArray) {\n    // Shortcuts\n    const thisWords = this.words;\n    const thatWords = wordArray.words;\n    const thisSigBytes = this.sigBytes;\n    const thatSigBytes = wordArray.sigBytes; // Clamp excess bits\n\n    this.clamp(); // Concat\n\n    if (thisSigBytes % 4) {\n      // Copy one byte at a time\n      for (let i = 0; i < thatSigBytes; i += 1) {\n        const thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n        thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;\n      }\n    } else {\n      // Copy one word at a time\n      for (let i = 0; i < thatSigBytes; i += 4) {\n        thisWords[thisSigBytes + i >>> 2] = thatWords[i >>> 2];\n      }\n    }\n\n    this.sigBytes += thatSigBytes; // Chainable\n\n    return this;\n  }\n  /**\r\n     * Removes insignificant bits.\r\n     *\r\n     * @example\r\n     *\r\n     *     wordArray.clamp();\r\n     */\n\n\n  clamp() {\n    // Shortcuts\n    const {\n      words,\n      sigBytes\n    } = this; // Clamp\n\n    words[sigBytes >>> 2] &= 0xffffffff << 32 - sigBytes % 4 * 8;\n    words.length = Math.ceil(sigBytes / 4);\n  }\n  /**\r\n     * Creates a copy of this word array.\r\n     *\r\n     * @return {WordArray} The clone.\r\n     *\r\n     * @example\r\n     *\r\n     *     var clone = wordArray.clone();\r\n     */\n\n\n  clone() {\n    const clone = super.clone.call(this);\n    clone.words = this.words.slice(0);\n    return clone;\n  }\n\n}","map":{"version":3,"sources":["/Users/sid/Desktop/SSOB/sso/client/node_modules/react-native-hash/JSHash/lib/core/WordArray.js"],"names":["Base","Hex","WordArray","constructor","words","sigBytes","length","typedArray","ArrayBuffer","Uint8Array","Int8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","buffer","byteOffset","byteLength","typedArrayByteLength","_words","i","random","nBytes","r","m_w","_m_w","_m_z","mask","result","Math","rcache","_r","push","toString","encoder","stringify","concat","wordArray","thisWords","thatWords","thisSigBytes","thatSigBytes","clamp","thatByte","ceil","clone","call","slice"],"mappings":"AAAA;;AACA;AAEA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,GAAP,MAAgB,UAAhB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,SAAN,SAAwBF,IAAxB,CAA6B;AAC1C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEG,EAAAA,WAAW,GAA0C;AAAA,QAAzCC,KAAyC,uEAAjC,EAAiC;AAAA,QAA7BC,QAA6B,uEAAlBD,KAAK,CAACE,MAAN,GAAe,CAAG;AACnD;AAEA,QAAIC,UAAU,GAAGH,KAAjB,CAHmD,CAInD;;AACA,QAAIG,UAAU,YAAYC,WAA1B,EAAuC;AACrCD,MAAAA,UAAU,GAAG,IAAIE,UAAJ,CAAeF,UAAf,CAAb;AACD,KAPkD,CASnD;;;AACA,QACEA,UAAU,YAAYG,SAAtB,IACKH,UAAU,YAAYI,iBAD3B,IAEKJ,UAAU,YAAYK,UAF3B,IAGKL,UAAU,YAAYM,WAH3B,IAIKN,UAAU,YAAYO,UAJ3B,IAKKP,UAAU,YAAYQ,WAL3B,IAMKR,UAAU,YAAYS,YAN3B,IAOKT,UAAU,YAAYU,YAR7B,EASE;AACAV,MAAAA,UAAU,GAAG,IAAIE,UAAJ,CACXF,UAAU,CAACW,MADA,EAEXX,UAAU,CAACY,UAFA,EAGXZ,UAAU,CAACa,UAHA,CAAb;AAKD,KAzBkD,CA2BnD;;;AACA,QAAIb,UAAU,YAAYE,UAA1B,EAAsC;AACpC;AACA,YAAMY,oBAAoB,GAAGd,UAAU,CAACa,UAAxC,CAFoC,CAIpC;;AACA,YAAME,MAAM,GAAG,EAAf;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,oBAApB,EAA0CE,CAAC,IAAI,CAA/C,EAAkD;AAChDD,QAAAA,MAAM,CAACC,CAAC,KAAK,CAAP,CAAN,IAAmBhB,UAAU,CAACgB,CAAD,CAAV,IAAkB,KAAMA,CAAC,GAAG,CAAL,GAAU,CAApD;AACD,OARmC,CAUpC;;;AACA,WAAKnB,KAAL,GAAakB,MAAb;AACA,WAAKjB,QAAL,GAAgBgB,oBAAhB;AACD,KAbD,MAaO;AACL;AACA,WAAKjB,KAAL,GAAaA,KAAb;AACA,WAAKC,QAAL,GAAgBA,QAAhB;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACe,SAANmB,MAAM,CAACC,MAAD,EAAS;AACpB,UAAMrB,KAAK,GAAG,EAAd;;AAEA,UAAMsB,CAAC,GAAIC,GAAD,IAAS;AACjB,UAAIC,IAAI,GAAGD,GAAX;AACA,UAAIE,IAAI,GAAG,UAAX;AACA,YAAMC,IAAI,GAAG,UAAb;AAEA,aAAO,MAAM;AACXD,QAAAA,IAAI,GAAI,UAAUA,IAAI,GAAG,MAAjB,KAA4BA,IAAI,IAAI,IAApC,CAAD,GAA8CC,IAArD;AACAF,QAAAA,IAAI,GAAI,UAAUA,IAAI,GAAG,MAAjB,KAA4BA,IAAI,IAAI,IAApC,CAAD,GAA8CE,IAArD;AACA,YAAIC,MAAM,GAAI,CAACF,IAAI,IAAI,IAAT,IAAiBD,IAAlB,GAA0BE,IAAvC;AACAC,QAAAA,MAAM,IAAI,WAAV;AACAA,QAAAA,MAAM,IAAI,GAAV;AACA,eAAOA,MAAM,IAAIC,IAAI,CAACR,MAAL,KAAgB,GAAhB,GAAsB,CAAtB,GAA0B,CAAC,CAA/B,CAAb;AACD,OAPD;AAQD,KAbD;;AAeA,SAAK,IAAID,CAAC,GAAG,CAAR,EAAWU,MAAhB,EAAwBV,CAAC,GAAGE,MAA5B,EAAoCF,CAAC,IAAI,CAAzC,EAA4C;AAC1C,YAAMW,EAAE,GAAGR,CAAC,CAAC,CAACO,MAAM,IAAID,IAAI,CAACR,MAAL,EAAX,IAA4B,WAA7B,CAAZ;;AAEAS,MAAAA,MAAM,GAAGC,EAAE,KAAK,UAAhB;AACA9B,MAAAA,KAAK,CAAC+B,IAAN,CAAYD,EAAE,KAAK,WAAR,GAAuB,CAAlC;AACD;;AAED,WAAO,IAAIhC,SAAJ,CAAcE,KAAd,EAAqBqB,MAArB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEW,EAAAA,QAAQ,GAAgB;AAAA,QAAfC,OAAe,uEAALpC,GAAK;AACtB,WAAOoC,OAAO,CAACC,SAAR,CAAkB,IAAlB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,MAAM,CAACC,SAAD,EAAY;AAChB;AACA,UAAMC,SAAS,GAAG,KAAKrC,KAAvB;AACA,UAAMsC,SAAS,GAAGF,SAAS,CAACpC,KAA5B;AACA,UAAMuC,YAAY,GAAG,KAAKtC,QAA1B;AACA,UAAMuC,YAAY,GAAGJ,SAAS,CAACnC,QAA/B,CALgB,CAOhB;;AACA,SAAKwC,KAAL,GARgB,CAUhB;;AACA,QAAIF,YAAY,GAAG,CAAnB,EAAsB;AACpB;AACA,WAAK,IAAIpB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGqB,YAApB,EAAkCrB,CAAC,IAAI,CAAvC,EAA0C;AACxC,cAAMuB,QAAQ,GAAIJ,SAAS,CAACnB,CAAC,KAAK,CAAP,CAAT,KAAwB,KAAMA,CAAC,GAAG,CAAL,GAAU,CAAxC,GAA8C,IAA/D;AACAkB,QAAAA,SAAS,CAAEE,YAAY,GAAGpB,CAAhB,KAAuB,CAAxB,CAAT,IACOuB,QAAQ,IAAK,KAAM,CAACH,YAAY,GAAGpB,CAAhB,IAAqB,CAAtB,GAA2B,CADpD;AAED;AACF,KAPD,MAOO;AACL;AACA,WAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGqB,YAApB,EAAkCrB,CAAC,IAAI,CAAvC,EAA0C;AACxCkB,QAAAA,SAAS,CAAEE,YAAY,GAAGpB,CAAhB,KAAuB,CAAxB,CAAT,GAAsCmB,SAAS,CAACnB,CAAC,KAAK,CAAP,CAA/C;AACD;AACF;;AACD,SAAKlB,QAAL,IAAiBuC,YAAjB,CAxBgB,CA0BhB;;AACA,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,KAAK,GAAG;AACN;AACA,UAAM;AAAEzC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAsB,IAA5B,CAFM,CAIN;;AACAD,IAAAA,KAAK,CAACC,QAAQ,KAAK,CAAd,CAAL,IAAyB,cAAe,KAAMA,QAAQ,GAAG,CAAZ,GAAiB,CAA9D;AACAD,IAAAA,KAAK,CAACE,MAAN,GAAe0B,IAAI,CAACe,IAAL,CAAU1C,QAAQ,GAAG,CAArB,CAAf;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE2C,EAAAA,KAAK,GAAG;AACN,UAAMA,KAAK,GAAG,MAAMA,KAAN,CAAYC,IAAZ,CAAiB,IAAjB,CAAd;AACAD,IAAAA,KAAK,CAAC5C,KAAN,GAAc,KAAKA,KAAL,CAAW8C,KAAX,CAAiB,CAAjB,CAAd;AAEA,WAAOF,KAAP;AACD;;AA9LyC","sourcesContent":["/* eslint linebreak-style: [\"error\", \"windows\"] */\r\n/* eslint-disable no-use-before-define */\r\n\r\nimport Base from './Base.js';\r\nimport Hex from './Hex.js';\r\n\r\n/**\r\n * An array of 32-bit words.\r\n *\r\n * @property {Array} words The array of 32-bit words.\r\n * @property {number} sigBytes The number of significant bytes in this word array.\r\n */\r\nexport default class WordArray extends Base {\r\n  /**\r\n     * Initializes a newly created word array.\r\n     *\r\n     * @param {Array} words (Optional) An array of 32-bit words.\r\n     * @param {number} sigBytes (Optional) The number of significant bytes in the words.\r\n     *\r\n     * @example\r\n     *\r\n     *     var wordArray = CryptoJS.lib.WordArray.create();\r\n     *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\r\n     *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\r\n     */\r\n  constructor(words = [], sigBytes = words.length * 4) {\r\n    super();\r\n\r\n    let typedArray = words;\r\n    // Convert buffers to uint8\r\n    if (typedArray instanceof ArrayBuffer) {\r\n      typedArray = new Uint8Array(typedArray);\r\n    }\r\n\r\n    // Convert other array views to uint8\r\n    if (\r\n      typedArray instanceof Int8Array\r\n        || typedArray instanceof Uint8ClampedArray\r\n        || typedArray instanceof Int16Array\r\n        || typedArray instanceof Uint16Array\r\n        || typedArray instanceof Int32Array\r\n        || typedArray instanceof Uint32Array\r\n        || typedArray instanceof Float32Array\r\n        || typedArray instanceof Float64Array\r\n    ) {\r\n      typedArray = new Uint8Array(\r\n        typedArray.buffer,\r\n        typedArray.byteOffset,\r\n        typedArray.byteLength,\r\n      );\r\n    }\r\n\r\n    // Handle Uint8Array\r\n    if (typedArray instanceof Uint8Array) {\r\n      // Shortcut\r\n      const typedArrayByteLength = typedArray.byteLength;\r\n\r\n      // Extract bytes\r\n      const _words = [];\r\n      for (let i = 0; i < typedArrayByteLength; i += 1) {\r\n        _words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);\r\n      }\r\n\r\n      // Initialize this word array\r\n      this.words = _words;\r\n      this.sigBytes = typedArrayByteLength;\r\n    } else {\r\n      // Else call normal init\r\n      this.words = words;\r\n      this.sigBytes = sigBytes;\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Creates a word array filled with random bytes.\r\n     *\r\n     * @param {number} nBytes The number of random bytes to generate.\r\n     *\r\n     * @return {WordArray} The random word array.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var wordArray = CryptoJS.lib.WordArray.random(16);\r\n     */\r\n  static random(nBytes) {\r\n    const words = [];\r\n\r\n    const r = (m_w) => {\r\n      let _m_w = m_w;\r\n      let _m_z = 0x3ade68b1;\r\n      const mask = 0xffffffff;\r\n\r\n      return () => {\r\n        _m_z = (0x9069 * (_m_z & 0xffff) + (_m_z >> 0x10)) & mask;\r\n        _m_w = (0x4650 * (_m_w & 0xffff) + (_m_w >> 0x10)) & mask;\r\n        let result = ((_m_z << 0x10) + _m_w) & mask;\r\n        result /= 0x100000000;\r\n        result += 0.5;\r\n        return result * (Math.random() > 0.5 ? 1 : -1);\r\n      };\r\n    };\r\n\r\n    for (let i = 0, rcache; i < nBytes; i += 4) {\r\n      const _r = r((rcache || Math.random()) * 0x100000000);\r\n\r\n      rcache = _r() * 0x3ade67b7;\r\n      words.push((_r() * 0x100000000) | 0);\r\n    }\r\n\r\n    return new WordArray(words, nBytes);\r\n  }\r\n\r\n  /**\r\n     * Converts this word array to a string.\r\n     *\r\n     * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\r\n     *\r\n     * @return {string} The stringified word array.\r\n     *\r\n     * @example\r\n     *\r\n     *     var string = wordArray + '';\r\n     *     var string = wordArray.toString();\r\n     *     var string = wordArray.toString(CryptoJS.enc.Utf8);\r\n     */\r\n  toString(encoder = Hex) {\r\n    return encoder.stringify(this);\r\n  }\r\n\r\n  /**\r\n     * Concatenates a word array to this word array.\r\n     *\r\n     * @param {WordArray} wordArray The word array to append.\r\n     *\r\n     * @return {WordArray} This word array.\r\n     *\r\n     * @example\r\n     *\r\n     *     wordArray1.concat(wordArray2);\r\n     */\r\n  concat(wordArray) {\r\n    // Shortcuts\r\n    const thisWords = this.words;\r\n    const thatWords = wordArray.words;\r\n    const thisSigBytes = this.sigBytes;\r\n    const thatSigBytes = wordArray.sigBytes;\r\n\r\n    // Clamp excess bits\r\n    this.clamp();\r\n\r\n    // Concat\r\n    if (thisSigBytes % 4) {\r\n      // Copy one byte at a time\r\n      for (let i = 0; i < thatSigBytes; i += 1) {\r\n        const thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\r\n        thisWords[(thisSigBytes + i) >>> 2]\r\n            |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);\r\n      }\r\n    } else {\r\n      // Copy one word at a time\r\n      for (let i = 0; i < thatSigBytes; i += 4) {\r\n        thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];\r\n      }\r\n    }\r\n    this.sigBytes += thatSigBytes;\r\n\r\n    // Chainable\r\n    return this;\r\n  }\r\n\r\n  /**\r\n     * Removes insignificant bits.\r\n     *\r\n     * @example\r\n     *\r\n     *     wordArray.clamp();\r\n     */\r\n  clamp() {\r\n    // Shortcuts\r\n    const { words, sigBytes } = this;\r\n\r\n    // Clamp\r\n    words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);\r\n    words.length = Math.ceil(sigBytes / 4);\r\n  }\r\n\r\n  /**\r\n     * Creates a copy of this word array.\r\n     *\r\n     * @return {WordArray} The clone.\r\n     *\r\n     * @example\r\n     *\r\n     *     var clone = wordArray.clone();\r\n     */\r\n  clone() {\r\n    const clone = super.clone.call(this);\r\n    clone.words = this.words.slice(0);\r\n\r\n    return clone;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}