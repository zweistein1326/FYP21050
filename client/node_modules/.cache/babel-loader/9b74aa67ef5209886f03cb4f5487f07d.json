{"ast":null,"code":"// Copyright (c) 2005  Tom Wu\n// All Rights Reserved.\n// See \"LICENSE\" for details.\n// Basic JavaScript BN library - subset useful for RSA encryption.\nimport { cbit, int2char, lbit, op_and, op_andnot, op_or, op_xor } from \"./util\"; // Bits per digit\n\nvar dbits; // JavaScript engine analysis\n\nvar canary = 0xdeadbeefcafe;\nvar j_lm = (canary & 0xffffff) == 0xefcafe; //#region\n\nvar lowprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\nvar lplim = (1 << 26) / lowprimes[lowprimes.length - 1]; //#endregion\n// (public) Constructor\n\nvar BigInteger =\n/** @class */\nfunction () {\n  function BigInteger(a, b, c) {\n    if (a != null) {\n      if (\"number\" == typeof a) {\n        this.fromNumber(a, b, c);\n      } else if (b == null && \"string\" != typeof a) {\n        this.fromString(a, 256);\n      } else {\n        this.fromString(a, b);\n      }\n    }\n  } //#region PUBLIC\n  // BigInteger.prototype.toString = bnToString;\n  // (public) return string representation in given radix\n\n\n  BigInteger.prototype.toString = function (b) {\n    if (this.s < 0) {\n      return \"-\" + this.negate().toString(b);\n    }\n\n    var k;\n\n    if (b == 16) {\n      k = 4;\n    } else if (b == 8) {\n      k = 3;\n    } else if (b == 2) {\n      k = 1;\n    } else if (b == 32) {\n      k = 5;\n    } else if (b == 4) {\n      k = 2;\n    } else {\n      return this.toRadix(b);\n    }\n\n    var km = (1 << k) - 1;\n    var d;\n    var m = false;\n    var r = \"\";\n    var i = this.t;\n    var p = this.DB - i * this.DB % k;\n\n    if (i-- > 0) {\n      if (p < this.DB && (d = this[i] >> p) > 0) {\n        m = true;\n        r = int2char(d);\n      }\n\n      while (i >= 0) {\n        if (p < k) {\n          d = (this[i] & (1 << p) - 1) << k - p;\n          d |= this[--i] >> (p += this.DB - k);\n        } else {\n          d = this[i] >> (p -= k) & km;\n\n          if (p <= 0) {\n            p += this.DB;\n            --i;\n          }\n        }\n\n        if (d > 0) {\n          m = true;\n        }\n\n        if (m) {\n          r += int2char(d);\n        }\n      }\n    }\n\n    return m ? r : \"0\";\n  }; // BigInteger.prototype.negate = bnNegate;\n  // (public) -this\n\n\n  BigInteger.prototype.negate = function () {\n    var r = nbi();\n    BigInteger.ZERO.subTo(this, r);\n    return r;\n  }; // BigInteger.prototype.abs = bnAbs;\n  // (public) |this|\n\n\n  BigInteger.prototype.abs = function () {\n    return this.s < 0 ? this.negate() : this;\n  }; // BigInteger.prototype.compareTo = bnCompareTo;\n  // (public) return + if this > a, - if this < a, 0 if equal\n\n\n  BigInteger.prototype.compareTo = function (a) {\n    var r = this.s - a.s;\n\n    if (r != 0) {\n      return r;\n    }\n\n    var i = this.t;\n    r = i - a.t;\n\n    if (r != 0) {\n      return this.s < 0 ? -r : r;\n    }\n\n    while (--i >= 0) {\n      if ((r = this[i] - a[i]) != 0) {\n        return r;\n      }\n    }\n\n    return 0;\n  }; // BigInteger.prototype.bitLength = bnBitLength;\n  // (public) return the number of bits in \"this\"\n\n\n  BigInteger.prototype.bitLength = function () {\n    if (this.t <= 0) {\n      return 0;\n    }\n\n    return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ this.s & this.DM);\n  }; // BigInteger.prototype.mod = bnMod;\n  // (public) this mod a\n\n\n  BigInteger.prototype.mod = function (a) {\n    var r = nbi();\n    this.abs().divRemTo(a, null, r);\n\n    if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) {\n      a.subTo(r, r);\n    }\n\n    return r;\n  }; // BigInteger.prototype.modPowInt = bnModPowInt;\n  // (public) this^e % m, 0 <= e < 2^32\n\n\n  BigInteger.prototype.modPowInt = function (e, m) {\n    var z;\n\n    if (e < 256 || m.isEven()) {\n      z = new Classic(m);\n    } else {\n      z = new Montgomery(m);\n    }\n\n    return this.exp(e, z);\n  }; // BigInteger.prototype.clone = bnClone;\n  // (public)\n\n\n  BigInteger.prototype.clone = function () {\n    var r = nbi();\n    this.copyTo(r);\n    return r;\n  }; // BigInteger.prototype.intValue = bnIntValue;\n  // (public) return value as integer\n\n\n  BigInteger.prototype.intValue = function () {\n    if (this.s < 0) {\n      if (this.t == 1) {\n        return this[0] - this.DV;\n      } else if (this.t == 0) {\n        return -1;\n      }\n    } else if (this.t == 1) {\n      return this[0];\n    } else if (this.t == 0) {\n      return 0;\n    } // assumes 16 < DB < 32\n\n\n    return (this[1] & (1 << 32 - this.DB) - 1) << this.DB | this[0];\n  }; // BigInteger.prototype.byteValue = bnByteValue;\n  // (public) return value as byte\n\n\n  BigInteger.prototype.byteValue = function () {\n    return this.t == 0 ? this.s : this[0] << 24 >> 24;\n  }; // BigInteger.prototype.shortValue = bnShortValue;\n  // (public) return value as short (assumes DB>=16)\n\n\n  BigInteger.prototype.shortValue = function () {\n    return this.t == 0 ? this.s : this[0] << 16 >> 16;\n  }; // BigInteger.prototype.signum = bnSigNum;\n  // (public) 0 if this == 0, 1 if this > 0\n\n\n  BigInteger.prototype.signum = function () {\n    if (this.s < 0) {\n      return -1;\n    } else if (this.t <= 0 || this.t == 1 && this[0] <= 0) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }; // BigInteger.prototype.toByteArray = bnToByteArray;\n  // (public) convert to bigendian byte array\n\n\n  BigInteger.prototype.toByteArray = function () {\n    var i = this.t;\n    var r = [];\n    r[0] = this.s;\n    var p = this.DB - i * this.DB % 8;\n    var d;\n    var k = 0;\n\n    if (i-- > 0) {\n      if (p < this.DB && (d = this[i] >> p) != (this.s & this.DM) >> p) {\n        r[k++] = d | this.s << this.DB - p;\n      }\n\n      while (i >= 0) {\n        if (p < 8) {\n          d = (this[i] & (1 << p) - 1) << 8 - p;\n          d |= this[--i] >> (p += this.DB - 8);\n        } else {\n          d = this[i] >> (p -= 8) & 0xff;\n\n          if (p <= 0) {\n            p += this.DB;\n            --i;\n          }\n        }\n\n        if ((d & 0x80) != 0) {\n          d |= -256;\n        }\n\n        if (k == 0 && (this.s & 0x80) != (d & 0x80)) {\n          ++k;\n        }\n\n        if (k > 0 || d != this.s) {\n          r[k++] = d;\n        }\n      }\n    }\n\n    return r;\n  }; // BigInteger.prototype.equals = bnEquals;\n\n\n  BigInteger.prototype.equals = function (a) {\n    return this.compareTo(a) == 0;\n  }; // BigInteger.prototype.min = bnMin;\n\n\n  BigInteger.prototype.min = function (a) {\n    return this.compareTo(a) < 0 ? this : a;\n  }; // BigInteger.prototype.max = bnMax;\n\n\n  BigInteger.prototype.max = function (a) {\n    return this.compareTo(a) > 0 ? this : a;\n  }; // BigInteger.prototype.and = bnAnd;\n\n\n  BigInteger.prototype.and = function (a) {\n    var r = nbi();\n    this.bitwiseTo(a, op_and, r);\n    return r;\n  }; // BigInteger.prototype.or = bnOr;\n\n\n  BigInteger.prototype.or = function (a) {\n    var r = nbi();\n    this.bitwiseTo(a, op_or, r);\n    return r;\n  }; // BigInteger.prototype.xor = bnXor;\n\n\n  BigInteger.prototype.xor = function (a) {\n    var r = nbi();\n    this.bitwiseTo(a, op_xor, r);\n    return r;\n  }; // BigInteger.prototype.andNot = bnAndNot;\n\n\n  BigInteger.prototype.andNot = function (a) {\n    var r = nbi();\n    this.bitwiseTo(a, op_andnot, r);\n    return r;\n  }; // BigInteger.prototype.not = bnNot;\n  // (public) ~this\n\n\n  BigInteger.prototype.not = function () {\n    var r = nbi();\n\n    for (var i = 0; i < this.t; ++i) {\n      r[i] = this.DM & ~this[i];\n    }\n\n    r.t = this.t;\n    r.s = ~this.s;\n    return r;\n  }; // BigInteger.prototype.shiftLeft = bnShiftLeft;\n  // (public) this << n\n\n\n  BigInteger.prototype.shiftLeft = function (n) {\n    var r = nbi();\n\n    if (n < 0) {\n      this.rShiftTo(-n, r);\n    } else {\n      this.lShiftTo(n, r);\n    }\n\n    return r;\n  }; // BigInteger.prototype.shiftRight = bnShiftRight;\n  // (public) this >> n\n\n\n  BigInteger.prototype.shiftRight = function (n) {\n    var r = nbi();\n\n    if (n < 0) {\n      this.lShiftTo(-n, r);\n    } else {\n      this.rShiftTo(n, r);\n    }\n\n    return r;\n  }; // BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;\n  // (public) returns index of lowest 1-bit (or -1 if none)\n\n\n  BigInteger.prototype.getLowestSetBit = function () {\n    for (var i = 0; i < this.t; ++i) {\n      if (this[i] != 0) {\n        return i * this.DB + lbit(this[i]);\n      }\n    }\n\n    if (this.s < 0) {\n      return this.t * this.DB;\n    }\n\n    return -1;\n  }; // BigInteger.prototype.bitCount = bnBitCount;\n  // (public) return number of set bits\n\n\n  BigInteger.prototype.bitCount = function () {\n    var r = 0;\n    var x = this.s & this.DM;\n\n    for (var i = 0; i < this.t; ++i) {\n      r += cbit(this[i] ^ x);\n    }\n\n    return r;\n  }; // BigInteger.prototype.testBit = bnTestBit;\n  // (public) true iff nth bit is set\n\n\n  BigInteger.prototype.testBit = function (n) {\n    var j = Math.floor(n / this.DB);\n\n    if (j >= this.t) {\n      return this.s != 0;\n    }\n\n    return (this[j] & 1 << n % this.DB) != 0;\n  }; // BigInteger.prototype.setBit = bnSetBit;\n  // (public) this | (1<<n)\n\n\n  BigInteger.prototype.setBit = function (n) {\n    return this.changeBit(n, op_or);\n  }; // BigInteger.prototype.clearBit = bnClearBit;\n  // (public) this & ~(1<<n)\n\n\n  BigInteger.prototype.clearBit = function (n) {\n    return this.changeBit(n, op_andnot);\n  }; // BigInteger.prototype.flipBit = bnFlipBit;\n  // (public) this ^ (1<<n)\n\n\n  BigInteger.prototype.flipBit = function (n) {\n    return this.changeBit(n, op_xor);\n  }; // BigInteger.prototype.add = bnAdd;\n  // (public) this + a\n\n\n  BigInteger.prototype.add = function (a) {\n    var r = nbi();\n    this.addTo(a, r);\n    return r;\n  }; // BigInteger.prototype.subtract = bnSubtract;\n  // (public) this - a\n\n\n  BigInteger.prototype.subtract = function (a) {\n    var r = nbi();\n    this.subTo(a, r);\n    return r;\n  }; // BigInteger.prototype.multiply = bnMultiply;\n  // (public) this * a\n\n\n  BigInteger.prototype.multiply = function (a) {\n    var r = nbi();\n    this.multiplyTo(a, r);\n    return r;\n  }; // BigInteger.prototype.divide = bnDivide;\n  // (public) this / a\n\n\n  BigInteger.prototype.divide = function (a) {\n    var r = nbi();\n    this.divRemTo(a, r, null);\n    return r;\n  }; // BigInteger.prototype.remainder = bnRemainder;\n  // (public) this % a\n\n\n  BigInteger.prototype.remainder = function (a) {\n    var r = nbi();\n    this.divRemTo(a, null, r);\n    return r;\n  }; // BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;\n  // (public) [this/a,this%a]\n\n\n  BigInteger.prototype.divideAndRemainder = function (a) {\n    var q = nbi();\n    var r = nbi();\n    this.divRemTo(a, q, r);\n    return [q, r];\n  }; // BigInteger.prototype.modPow = bnModPow;\n  // (public) this^e % m (HAC 14.85)\n\n\n  BigInteger.prototype.modPow = function (e, m) {\n    var i = e.bitLength();\n    var k;\n    var r = nbv(1);\n    var z;\n\n    if (i <= 0) {\n      return r;\n    } else if (i < 18) {\n      k = 1;\n    } else if (i < 48) {\n      k = 3;\n    } else if (i < 144) {\n      k = 4;\n    } else if (i < 768) {\n      k = 5;\n    } else {\n      k = 6;\n    }\n\n    if (i < 8) {\n      z = new Classic(m);\n    } else if (m.isEven()) {\n      z = new Barrett(m);\n    } else {\n      z = new Montgomery(m);\n    } // precomputation\n\n\n    var g = [];\n    var n = 3;\n    var k1 = k - 1;\n    var km = (1 << k) - 1;\n    g[1] = z.convert(this);\n\n    if (k > 1) {\n      var g2 = nbi();\n      z.sqrTo(g[1], g2);\n\n      while (n <= km) {\n        g[n] = nbi();\n        z.mulTo(g2, g[n - 2], g[n]);\n        n += 2;\n      }\n    }\n\n    var j = e.t - 1;\n    var w;\n    var is1 = true;\n    var r2 = nbi();\n    var t;\n    i = nbits(e[j]) - 1;\n\n    while (j >= 0) {\n      if (i >= k1) {\n        w = e[j] >> i - k1 & km;\n      } else {\n        w = (e[j] & (1 << i + 1) - 1) << k1 - i;\n\n        if (j > 0) {\n          w |= e[j - 1] >> this.DB + i - k1;\n        }\n      }\n\n      n = k;\n\n      while ((w & 1) == 0) {\n        w >>= 1;\n        --n;\n      }\n\n      if ((i -= n) < 0) {\n        i += this.DB;\n        --j;\n      }\n\n      if (is1) {\n        // ret == 1, don't bother squaring or multiplying it\n        g[w].copyTo(r);\n        is1 = false;\n      } else {\n        while (n > 1) {\n          z.sqrTo(r, r2);\n          z.sqrTo(r2, r);\n          n -= 2;\n        }\n\n        if (n > 0) {\n          z.sqrTo(r, r2);\n        } else {\n          t = r;\n          r = r2;\n          r2 = t;\n        }\n\n        z.mulTo(r2, g[w], r);\n      }\n\n      while (j >= 0 && (e[j] & 1 << i) == 0) {\n        z.sqrTo(r, r2);\n        t = r;\n        r = r2;\n        r2 = t;\n\n        if (--i < 0) {\n          i = this.DB - 1;\n          --j;\n        }\n      }\n    }\n\n    return z.revert(r);\n  }; // BigInteger.prototype.modInverse = bnModInverse;\n  // (public) 1/this % m (HAC 14.61)\n\n\n  BigInteger.prototype.modInverse = function (m) {\n    var ac = m.isEven();\n\n    if (this.isEven() && ac || m.signum() == 0) {\n      return BigInteger.ZERO;\n    }\n\n    var u = m.clone();\n    var v = this.clone();\n    var a = nbv(1);\n    var b = nbv(0);\n    var c = nbv(0);\n    var d = nbv(1);\n\n    while (u.signum() != 0) {\n      while (u.isEven()) {\n        u.rShiftTo(1, u);\n\n        if (ac) {\n          if (!a.isEven() || !b.isEven()) {\n            a.addTo(this, a);\n            b.subTo(m, b);\n          }\n\n          a.rShiftTo(1, a);\n        } else if (!b.isEven()) {\n          b.subTo(m, b);\n        }\n\n        b.rShiftTo(1, b);\n      }\n\n      while (v.isEven()) {\n        v.rShiftTo(1, v);\n\n        if (ac) {\n          if (!c.isEven() || !d.isEven()) {\n            c.addTo(this, c);\n            d.subTo(m, d);\n          }\n\n          c.rShiftTo(1, c);\n        } else if (!d.isEven()) {\n          d.subTo(m, d);\n        }\n\n        d.rShiftTo(1, d);\n      }\n\n      if (u.compareTo(v) >= 0) {\n        u.subTo(v, u);\n\n        if (ac) {\n          a.subTo(c, a);\n        }\n\n        b.subTo(d, b);\n      } else {\n        v.subTo(u, v);\n\n        if (ac) {\n          c.subTo(a, c);\n        }\n\n        d.subTo(b, d);\n      }\n    }\n\n    if (v.compareTo(BigInteger.ONE) != 0) {\n      return BigInteger.ZERO;\n    }\n\n    if (d.compareTo(m) >= 0) {\n      return d.subtract(m);\n    }\n\n    if (d.signum() < 0) {\n      d.addTo(m, d);\n    } else {\n      return d;\n    }\n\n    if (d.signum() < 0) {\n      return d.add(m);\n    } else {\n      return d;\n    }\n  }; // BigInteger.prototype.pow = bnPow;\n  // (public) this^e\n\n\n  BigInteger.prototype.pow = function (e) {\n    return this.exp(e, new NullExp());\n  }; // BigInteger.prototype.gcd = bnGCD;\n  // (public) gcd(this,a) (HAC 14.54)\n\n\n  BigInteger.prototype.gcd = function (a) {\n    var x = this.s < 0 ? this.negate() : this.clone();\n    var y = a.s < 0 ? a.negate() : a.clone();\n\n    if (x.compareTo(y) < 0) {\n      var t = x;\n      x = y;\n      y = t;\n    }\n\n    var i = x.getLowestSetBit();\n    var g = y.getLowestSetBit();\n\n    if (g < 0) {\n      return x;\n    }\n\n    if (i < g) {\n      g = i;\n    }\n\n    if (g > 0) {\n      x.rShiftTo(g, x);\n      y.rShiftTo(g, y);\n    }\n\n    while (x.signum() > 0) {\n      if ((i = x.getLowestSetBit()) > 0) {\n        x.rShiftTo(i, x);\n      }\n\n      if ((i = y.getLowestSetBit()) > 0) {\n        y.rShiftTo(i, y);\n      }\n\n      if (x.compareTo(y) >= 0) {\n        x.subTo(y, x);\n        x.rShiftTo(1, x);\n      } else {\n        y.subTo(x, y);\n        y.rShiftTo(1, y);\n      }\n    }\n\n    if (g > 0) {\n      y.lShiftTo(g, y);\n    }\n\n    return y;\n  }; // BigInteger.prototype.isProbablePrime = bnIsProbablePrime;\n  // (public) test primality with certainty >= 1-.5^t\n\n\n  BigInteger.prototype.isProbablePrime = function (t) {\n    var i;\n    var x = this.abs();\n\n    if (x.t == 1 && x[0] <= lowprimes[lowprimes.length - 1]) {\n      for (i = 0; i < lowprimes.length; ++i) {\n        if (x[0] == lowprimes[i]) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    if (x.isEven()) {\n      return false;\n    }\n\n    i = 1;\n\n    while (i < lowprimes.length) {\n      var m = lowprimes[i];\n      var j = i + 1;\n\n      while (j < lowprimes.length && m < lplim) {\n        m *= lowprimes[j++];\n      }\n\n      m = x.modInt(m);\n\n      while (i < j) {\n        if (m % lowprimes[i++] == 0) {\n          return false;\n        }\n      }\n    }\n\n    return x.millerRabin(t);\n  }; //#endregion PUBLIC\n  //#region PROTECTED\n  // BigInteger.prototype.copyTo = bnpCopyTo;\n  // (protected) copy this to r\n\n\n  BigInteger.prototype.copyTo = function (r) {\n    for (var i = this.t - 1; i >= 0; --i) {\n      r[i] = this[i];\n    }\n\n    r.t = this.t;\n    r.s = this.s;\n  }; // BigInteger.prototype.fromInt = bnpFromInt;\n  // (protected) set from integer value x, -DV <= x < DV\n\n\n  BigInteger.prototype.fromInt = function (x) {\n    this.t = 1;\n    this.s = x < 0 ? -1 : 0;\n\n    if (x > 0) {\n      this[0] = x;\n    } else if (x < -1) {\n      this[0] = x + this.DV;\n    } else {\n      this.t = 0;\n    }\n  }; // BigInteger.prototype.fromString = bnpFromString;\n  // (protected) set from string and radix\n\n\n  BigInteger.prototype.fromString = function (s, b) {\n    var k;\n\n    if (b == 16) {\n      k = 4;\n    } else if (b == 8) {\n      k = 3;\n    } else if (b == 256) {\n      k = 8;\n      /* byte array */\n    } else if (b == 2) {\n      k = 1;\n    } else if (b == 32) {\n      k = 5;\n    } else if (b == 4) {\n      k = 2;\n    } else {\n      this.fromRadix(s, b);\n      return;\n    }\n\n    this.t = 0;\n    this.s = 0;\n    var i = s.length;\n    var mi = false;\n    var sh = 0;\n\n    while (--i >= 0) {\n      var x = k == 8 ? +s[i] & 0xff : intAt(s, i);\n\n      if (x < 0) {\n        if (s.charAt(i) == \"-\") {\n          mi = true;\n        }\n\n        continue;\n      }\n\n      mi = false;\n\n      if (sh == 0) {\n        this[this.t++] = x;\n      } else if (sh + k > this.DB) {\n        this[this.t - 1] |= (x & (1 << this.DB - sh) - 1) << sh;\n        this[this.t++] = x >> this.DB - sh;\n      } else {\n        this[this.t - 1] |= x << sh;\n      }\n\n      sh += k;\n\n      if (sh >= this.DB) {\n        sh -= this.DB;\n      }\n    }\n\n    if (k == 8 && (+s[0] & 0x80) != 0) {\n      this.s = -1;\n\n      if (sh > 0) {\n        this[this.t - 1] |= (1 << this.DB - sh) - 1 << sh;\n      }\n    }\n\n    this.clamp();\n\n    if (mi) {\n      BigInteger.ZERO.subTo(this, this);\n    }\n  }; // BigInteger.prototype.clamp = bnpClamp;\n  // (protected) clamp off excess high words\n\n\n  BigInteger.prototype.clamp = function () {\n    var c = this.s & this.DM;\n\n    while (this.t > 0 && this[this.t - 1] == c) {\n      --this.t;\n    }\n  }; // BigInteger.prototype.dlShiftTo = bnpDLShiftTo;\n  // (protected) r = this << n*DB\n\n\n  BigInteger.prototype.dlShiftTo = function (n, r) {\n    var i;\n\n    for (i = this.t - 1; i >= 0; --i) {\n      r[i + n] = this[i];\n    }\n\n    for (i = n - 1; i >= 0; --i) {\n      r[i] = 0;\n    }\n\n    r.t = this.t + n;\n    r.s = this.s;\n  }; // BigInteger.prototype.drShiftTo = bnpDRShiftTo;\n  // (protected) r = this >> n*DB\n\n\n  BigInteger.prototype.drShiftTo = function (n, r) {\n    for (var i = n; i < this.t; ++i) {\n      r[i - n] = this[i];\n    }\n\n    r.t = Math.max(this.t - n, 0);\n    r.s = this.s;\n  }; // BigInteger.prototype.lShiftTo = bnpLShiftTo;\n  // (protected) r = this << n\n\n\n  BigInteger.prototype.lShiftTo = function (n, r) {\n    var bs = n % this.DB;\n    var cbs = this.DB - bs;\n    var bm = (1 << cbs) - 1;\n    var ds = Math.floor(n / this.DB);\n    var c = this.s << bs & this.DM;\n\n    for (var i = this.t - 1; i >= 0; --i) {\n      r[i + ds + 1] = this[i] >> cbs | c;\n      c = (this[i] & bm) << bs;\n    }\n\n    for (var i = ds - 1; i >= 0; --i) {\n      r[i] = 0;\n    }\n\n    r[ds] = c;\n    r.t = this.t + ds + 1;\n    r.s = this.s;\n    r.clamp();\n  }; // BigInteger.prototype.rShiftTo = bnpRShiftTo;\n  // (protected) r = this >> n\n\n\n  BigInteger.prototype.rShiftTo = function (n, r) {\n    r.s = this.s;\n    var ds = Math.floor(n / this.DB);\n\n    if (ds >= this.t) {\n      r.t = 0;\n      return;\n    }\n\n    var bs = n % this.DB;\n    var cbs = this.DB - bs;\n    var bm = (1 << bs) - 1;\n    r[0] = this[ds] >> bs;\n\n    for (var i = ds + 1; i < this.t; ++i) {\n      r[i - ds - 1] |= (this[i] & bm) << cbs;\n      r[i - ds] = this[i] >> bs;\n    }\n\n    if (bs > 0) {\n      r[this.t - ds - 1] |= (this.s & bm) << cbs;\n    }\n\n    r.t = this.t - ds;\n    r.clamp();\n  }; // BigInteger.prototype.subTo = bnpSubTo;\n  // (protected) r = this - a\n\n\n  BigInteger.prototype.subTo = function (a, r) {\n    var i = 0;\n    var c = 0;\n    var m = Math.min(a.t, this.t);\n\n    while (i < m) {\n      c += this[i] - a[i];\n      r[i++] = c & this.DM;\n      c >>= this.DB;\n    }\n\n    if (a.t < this.t) {\n      c -= a.s;\n\n      while (i < this.t) {\n        c += this[i];\n        r[i++] = c & this.DM;\n        c >>= this.DB;\n      }\n\n      c += this.s;\n    } else {\n      c += this.s;\n\n      while (i < a.t) {\n        c -= a[i];\n        r[i++] = c & this.DM;\n        c >>= this.DB;\n      }\n\n      c -= a.s;\n    }\n\n    r.s = c < 0 ? -1 : 0;\n\n    if (c < -1) {\n      r[i++] = this.DV + c;\n    } else if (c > 0) {\n      r[i++] = c;\n    }\n\n    r.t = i;\n    r.clamp();\n  }; // BigInteger.prototype.multiplyTo = bnpMultiplyTo;\n  // (protected) r = this * a, r != this,a (HAC 14.12)\n  // \"this\" should be the larger one if appropriate.\n\n\n  BigInteger.prototype.multiplyTo = function (a, r) {\n    var x = this.abs();\n    var y = a.abs();\n    var i = x.t;\n    r.t = i + y.t;\n\n    while (--i >= 0) {\n      r[i] = 0;\n    }\n\n    for (i = 0; i < y.t; ++i) {\n      r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);\n    }\n\n    r.s = 0;\n    r.clamp();\n\n    if (this.s != a.s) {\n      BigInteger.ZERO.subTo(r, r);\n    }\n  }; // BigInteger.prototype.squareTo = bnpSquareTo;\n  // (protected) r = this^2, r != this (HAC 14.16)\n\n\n  BigInteger.prototype.squareTo = function (r) {\n    var x = this.abs();\n    var i = r.t = 2 * x.t;\n\n    while (--i >= 0) {\n      r[i] = 0;\n    }\n\n    for (i = 0; i < x.t - 1; ++i) {\n      var c = x.am(i, x[i], r, 2 * i, 0, 1);\n\n      if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {\n        r[i + x.t] -= x.DV;\n        r[i + x.t + 1] = 1;\n      }\n    }\n\n    if (r.t > 0) {\n      r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);\n    }\n\n    r.s = 0;\n    r.clamp();\n  }; // BigInteger.prototype.divRemTo = bnpDivRemTo;\n  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\n  // r != q, this != m.  q or r may be null.\n\n\n  BigInteger.prototype.divRemTo = function (m, q, r) {\n    var pm = m.abs();\n\n    if (pm.t <= 0) {\n      return;\n    }\n\n    var pt = this.abs();\n\n    if (pt.t < pm.t) {\n      if (q != null) {\n        q.fromInt(0);\n      }\n\n      if (r != null) {\n        this.copyTo(r);\n      }\n\n      return;\n    }\n\n    if (r == null) {\n      r = nbi();\n    }\n\n    var y = nbi();\n    var ts = this.s;\n    var ms = m.s;\n    var nsh = this.DB - nbits(pm[pm.t - 1]); // normalize modulus\n\n    if (nsh > 0) {\n      pm.lShiftTo(nsh, y);\n      pt.lShiftTo(nsh, r);\n    } else {\n      pm.copyTo(y);\n      pt.copyTo(r);\n    }\n\n    var ys = y.t;\n    var y0 = y[ys - 1];\n\n    if (y0 == 0) {\n      return;\n    }\n\n    var yt = y0 * (1 << this.F1) + (ys > 1 ? y[ys - 2] >> this.F2 : 0);\n    var d1 = this.FV / yt;\n    var d2 = (1 << this.F1) / yt;\n    var e = 1 << this.F2;\n    var i = r.t;\n    var j = i - ys;\n    var t = q == null ? nbi() : q;\n    y.dlShiftTo(j, t);\n\n    if (r.compareTo(t) >= 0) {\n      r[r.t++] = 1;\n      r.subTo(t, r);\n    }\n\n    BigInteger.ONE.dlShiftTo(ys, t);\n    t.subTo(y, y); // \"negative\" y so we can replace sub with am later\n\n    while (y.t < ys) {\n      y[y.t++] = 0;\n    }\n\n    while (--j >= 0) {\n      // Estimate quotient digit\n      var qd = r[--i] == y0 ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);\n\n      if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {\n        // Try it out\n        y.dlShiftTo(j, t);\n        r.subTo(t, r);\n\n        while (r[i] < --qd) {\n          r.subTo(t, r);\n        }\n      }\n    }\n\n    if (q != null) {\n      r.drShiftTo(ys, q);\n\n      if (ts != ms) {\n        BigInteger.ZERO.subTo(q, q);\n      }\n    }\n\n    r.t = ys;\n    r.clamp();\n\n    if (nsh > 0) {\n      r.rShiftTo(nsh, r);\n    } // Denormalize remainder\n\n\n    if (ts < 0) {\n      BigInteger.ZERO.subTo(r, r);\n    }\n  }; // BigInteger.prototype.invDigit = bnpInvDigit;\n  // (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\n  // justification:\n  //         xy == 1 (mod m)\n  //         xy =  1+km\n  //   xy(2-xy) = (1+km)(1-km)\n  // x[y(2-xy)] = 1-k^2m^2\n  // x[y(2-xy)] == 1 (mod m^2)\n  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\n  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\n  // JS multiply \"overflows\" differently from C/C++, so care is needed here.\n\n\n  BigInteger.prototype.invDigit = function () {\n    if (this.t < 1) {\n      return 0;\n    }\n\n    var x = this[0];\n\n    if ((x & 1) == 0) {\n      return 0;\n    }\n\n    var y = x & 3; // y == 1/x mod 2^2\n\n    y = y * (2 - (x & 0xf) * y) & 0xf; // y == 1/x mod 2^4\n\n    y = y * (2 - (x & 0xff) * y) & 0xff; // y == 1/x mod 2^8\n\n    y = y * (2 - ((x & 0xffff) * y & 0xffff)) & 0xffff; // y == 1/x mod 2^16\n    // last step - calculate inverse mod DV directly;\n    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\n\n    y = y * (2 - x * y % this.DV) % this.DV; // y == 1/x mod 2^dbits\n    // we really want the negative inverse, and -DV < y < DV\n\n    return y > 0 ? this.DV - y : -y;\n  }; // BigInteger.prototype.isEven = bnpIsEven;\n  // (protected) true iff this is even\n\n\n  BigInteger.prototype.isEven = function () {\n    return (this.t > 0 ? this[0] & 1 : this.s) == 0;\n  }; // BigInteger.prototype.exp = bnpExp;\n  // (protected) this^e, e < 2^32, doing sqr and mul with \"r\" (HAC 14.79)\n\n\n  BigInteger.prototype.exp = function (e, z) {\n    if (e > 0xffffffff || e < 1) {\n      return BigInteger.ONE;\n    }\n\n    var r = nbi();\n    var r2 = nbi();\n    var g = z.convert(this);\n    var i = nbits(e) - 1;\n    g.copyTo(r);\n\n    while (--i >= 0) {\n      z.sqrTo(r, r2);\n\n      if ((e & 1 << i) > 0) {\n        z.mulTo(r2, g, r);\n      } else {\n        var t = r;\n        r = r2;\n        r2 = t;\n      }\n    }\n\n    return z.revert(r);\n  }; // BigInteger.prototype.chunkSize = bnpChunkSize;\n  // (protected) return x s.t. r^x < DV\n\n\n  BigInteger.prototype.chunkSize = function (r) {\n    return Math.floor(Math.LN2 * this.DB / Math.log(r));\n  }; // BigInteger.prototype.toRadix = bnpToRadix;\n  // (protected) convert to radix string\n\n\n  BigInteger.prototype.toRadix = function (b) {\n    if (b == null) {\n      b = 10;\n    }\n\n    if (this.signum() == 0 || b < 2 || b > 36) {\n      return \"0\";\n    }\n\n    var cs = this.chunkSize(b);\n    var a = Math.pow(b, cs);\n    var d = nbv(a);\n    var y = nbi();\n    var z = nbi();\n    var r = \"\";\n    this.divRemTo(d, y, z);\n\n    while (y.signum() > 0) {\n      r = (a + z.intValue()).toString(b).substr(1) + r;\n      y.divRemTo(d, y, z);\n    }\n\n    return z.intValue().toString(b) + r;\n  }; // BigInteger.prototype.fromRadix = bnpFromRadix;\n  // (protected) convert from radix string\n\n\n  BigInteger.prototype.fromRadix = function (s, b) {\n    this.fromInt(0);\n\n    if (b == null) {\n      b = 10;\n    }\n\n    var cs = this.chunkSize(b);\n    var d = Math.pow(b, cs);\n    var mi = false;\n    var j = 0;\n    var w = 0;\n\n    for (var i = 0; i < s.length; ++i) {\n      var x = intAt(s, i);\n\n      if (x < 0) {\n        if (s.charAt(i) == \"-\" && this.signum() == 0) {\n          mi = true;\n        }\n\n        continue;\n      }\n\n      w = b * w + x;\n\n      if (++j >= cs) {\n        this.dMultiply(d);\n        this.dAddOffset(w, 0);\n        j = 0;\n        w = 0;\n      }\n    }\n\n    if (j > 0) {\n      this.dMultiply(Math.pow(b, j));\n      this.dAddOffset(w, 0);\n    }\n\n    if (mi) {\n      BigInteger.ZERO.subTo(this, this);\n    }\n  }; // BigInteger.prototype.fromNumber = bnpFromNumber;\n  // (protected) alternate constructor\n\n\n  BigInteger.prototype.fromNumber = function (a, b, c) {\n    if (\"number\" == typeof b) {\n      // new BigInteger(int,int,RNG)\n      if (a < 2) {\n        this.fromInt(1);\n      } else {\n        this.fromNumber(a, c);\n\n        if (!this.testBit(a - 1)) {\n          // force MSB set\n          this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this);\n        }\n\n        if (this.isEven()) {\n          this.dAddOffset(1, 0);\n        } // force odd\n\n\n        while (!this.isProbablePrime(b)) {\n          this.dAddOffset(2, 0);\n\n          if (this.bitLength() > a) {\n            this.subTo(BigInteger.ONE.shiftLeft(a - 1), this);\n          }\n        }\n      }\n    } else {\n      // new BigInteger(int,RNG)\n      var x = [];\n      var t = a & 7;\n      x.length = (a >> 3) + 1;\n      b.nextBytes(x);\n\n      if (t > 0) {\n        x[0] &= (1 << t) - 1;\n      } else {\n        x[0] = 0;\n      }\n\n      this.fromString(x, 256);\n    }\n  }; // BigInteger.prototype.bitwiseTo = bnpBitwiseTo;\n  // (protected) r = this op a (bitwise)\n\n\n  BigInteger.prototype.bitwiseTo = function (a, op, r) {\n    var i;\n    var f;\n    var m = Math.min(a.t, this.t);\n\n    for (i = 0; i < m; ++i) {\n      r[i] = op(this[i], a[i]);\n    }\n\n    if (a.t < this.t) {\n      f = a.s & this.DM;\n\n      for (i = m; i < this.t; ++i) {\n        r[i] = op(this[i], f);\n      }\n\n      r.t = this.t;\n    } else {\n      f = this.s & this.DM;\n\n      for (i = m; i < a.t; ++i) {\n        r[i] = op(f, a[i]);\n      }\n\n      r.t = a.t;\n    }\n\n    r.s = op(this.s, a.s);\n    r.clamp();\n  }; // BigInteger.prototype.changeBit = bnpChangeBit;\n  // (protected) this op (1<<n)\n\n\n  BigInteger.prototype.changeBit = function (n, op) {\n    var r = BigInteger.ONE.shiftLeft(n);\n    this.bitwiseTo(r, op, r);\n    return r;\n  }; // BigInteger.prototype.addTo = bnpAddTo;\n  // (protected) r = this + a\n\n\n  BigInteger.prototype.addTo = function (a, r) {\n    var i = 0;\n    var c = 0;\n    var m = Math.min(a.t, this.t);\n\n    while (i < m) {\n      c += this[i] + a[i];\n      r[i++] = c & this.DM;\n      c >>= this.DB;\n    }\n\n    if (a.t < this.t) {\n      c += a.s;\n\n      while (i < this.t) {\n        c += this[i];\n        r[i++] = c & this.DM;\n        c >>= this.DB;\n      }\n\n      c += this.s;\n    } else {\n      c += this.s;\n\n      while (i < a.t) {\n        c += a[i];\n        r[i++] = c & this.DM;\n        c >>= this.DB;\n      }\n\n      c += a.s;\n    }\n\n    r.s = c < 0 ? -1 : 0;\n\n    if (c > 0) {\n      r[i++] = c;\n    } else if (c < -1) {\n      r[i++] = this.DV + c;\n    }\n\n    r.t = i;\n    r.clamp();\n  }; // BigInteger.prototype.dMultiply = bnpDMultiply;\n  // (protected) this *= n, this >= 0, 1 < n < DV\n\n\n  BigInteger.prototype.dMultiply = function (n) {\n    this[this.t] = this.am(0, n - 1, this, 0, 0, this.t);\n    ++this.t;\n    this.clamp();\n  }; // BigInteger.prototype.dAddOffset = bnpDAddOffset;\n  // (protected) this += n << w words, this >= 0\n\n\n  BigInteger.prototype.dAddOffset = function (n, w) {\n    if (n == 0) {\n      return;\n    }\n\n    while (this.t <= w) {\n      this[this.t++] = 0;\n    }\n\n    this[w] += n;\n\n    while (this[w] >= this.DV) {\n      this[w] -= this.DV;\n\n      if (++w >= this.t) {\n        this[this.t++] = 0;\n      }\n\n      ++this[w];\n    }\n  }; // BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;\n  // (protected) r = lower n words of \"this * a\", a.t <= n\n  // \"this\" should be the larger one if appropriate.\n\n\n  BigInteger.prototype.multiplyLowerTo = function (a, n, r) {\n    var i = Math.min(this.t + a.t, n);\n    r.s = 0; // assumes a,this >= 0\n\n    r.t = i;\n\n    while (i > 0) {\n      r[--i] = 0;\n    }\n\n    for (var j = r.t - this.t; i < j; ++i) {\n      r[i + this.t] = this.am(0, a[i], r, i, 0, this.t);\n    }\n\n    for (var j = Math.min(a.t, n); i < j; ++i) {\n      this.am(0, a[i], r, i, 0, n - i);\n    }\n\n    r.clamp();\n  }; // BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;\n  // (protected) r = \"this * a\" without lower n words, n > 0\n  // \"this\" should be the larger one if appropriate.\n\n\n  BigInteger.prototype.multiplyUpperTo = function (a, n, r) {\n    --n;\n    var i = r.t = this.t + a.t - n;\n    r.s = 0; // assumes a,this >= 0\n\n    while (--i >= 0) {\n      r[i] = 0;\n    }\n\n    for (i = Math.max(n - this.t, 0); i < a.t; ++i) {\n      r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n);\n    }\n\n    r.clamp();\n    r.drShiftTo(1, r);\n  }; // BigInteger.prototype.modInt = bnpModInt;\n  // (protected) this % n, n < 2^26\n\n\n  BigInteger.prototype.modInt = function (n) {\n    if (n <= 0) {\n      return 0;\n    }\n\n    var d = this.DV % n;\n    var r = this.s < 0 ? n - 1 : 0;\n\n    if (this.t > 0) {\n      if (d == 0) {\n        r = this[0] % n;\n      } else {\n        for (var i = this.t - 1; i >= 0; --i) {\n          r = (d * r + this[i]) % n;\n        }\n      }\n    }\n\n    return r;\n  }; // BigInteger.prototype.millerRabin = bnpMillerRabin;\n  // (protected) true if probably prime (HAC 4.24, Miller-Rabin)\n\n\n  BigInteger.prototype.millerRabin = function (t) {\n    var n1 = this.subtract(BigInteger.ONE);\n    var k = n1.getLowestSetBit();\n\n    if (k <= 0) {\n      return false;\n    }\n\n    var r = n1.shiftRight(k);\n    t = t + 1 >> 1;\n\n    if (t > lowprimes.length) {\n      t = lowprimes.length;\n    }\n\n    var a = nbi();\n\n    for (var i = 0; i < t; ++i) {\n      // Pick bases at random, instead of starting at 2\n      a.fromInt(lowprimes[Math.floor(Math.random() * lowprimes.length)]);\n      var y = a.modPow(r, this);\n\n      if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {\n        var j = 1;\n\n        while (j++ < k && y.compareTo(n1) != 0) {\n          y = y.modPowInt(2, this);\n\n          if (y.compareTo(BigInteger.ONE) == 0) {\n            return false;\n          }\n        }\n\n        if (y.compareTo(n1) != 0) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }; // BigInteger.prototype.square = bnSquare;\n  // (public) this^2\n\n\n  BigInteger.prototype.square = function () {\n    var r = nbi();\n    this.squareTo(r);\n    return r;\n  }; //#region ASYNC\n  // Public API method\n\n\n  BigInteger.prototype.gcda = function (a, callback) {\n    var x = this.s < 0 ? this.negate() : this.clone();\n    var y = a.s < 0 ? a.negate() : a.clone();\n\n    if (x.compareTo(y) < 0) {\n      var t = x;\n      x = y;\n      y = t;\n    }\n\n    var i = x.getLowestSetBit();\n    var g = y.getLowestSetBit();\n\n    if (g < 0) {\n      callback(x);\n      return;\n    }\n\n    if (i < g) {\n      g = i;\n    }\n\n    if (g > 0) {\n      x.rShiftTo(g, x);\n      y.rShiftTo(g, y);\n    } // Workhorse of the algorithm, gets called 200 - 800 times per 512 bit keygen.\n\n\n    var gcda1 = function () {\n      if ((i = x.getLowestSetBit()) > 0) {\n        x.rShiftTo(i, x);\n      }\n\n      if ((i = y.getLowestSetBit()) > 0) {\n        y.rShiftTo(i, y);\n      }\n\n      if (x.compareTo(y) >= 0) {\n        x.subTo(y, x);\n        x.rShiftTo(1, x);\n      } else {\n        y.subTo(x, y);\n        y.rShiftTo(1, y);\n      }\n\n      if (!(x.signum() > 0)) {\n        if (g > 0) {\n          y.lShiftTo(g, y);\n        }\n\n        setTimeout(function () {\n          callback(y);\n        }, 0); // escape\n      } else {\n        setTimeout(gcda1, 0);\n      }\n    };\n\n    setTimeout(gcda1, 10);\n  }; // (protected) alternate constructor\n\n\n  BigInteger.prototype.fromNumberAsync = function (a, b, c, callback) {\n    if (\"number\" == typeof b) {\n      if (a < 2) {\n        this.fromInt(1);\n      } else {\n        this.fromNumber(a, c);\n\n        if (!this.testBit(a - 1)) {\n          this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this);\n        }\n\n        if (this.isEven()) {\n          this.dAddOffset(1, 0);\n        }\n\n        var bnp_1 = this;\n\n        var bnpfn1_1 = function () {\n          bnp_1.dAddOffset(2, 0);\n\n          if (bnp_1.bitLength() > a) {\n            bnp_1.subTo(BigInteger.ONE.shiftLeft(a - 1), bnp_1);\n          }\n\n          if (bnp_1.isProbablePrime(b)) {\n            setTimeout(function () {\n              callback();\n            }, 0); // escape\n          } else {\n            setTimeout(bnpfn1_1, 0);\n          }\n        };\n\n        setTimeout(bnpfn1_1, 0);\n      }\n    } else {\n      var x = [];\n      var t = a & 7;\n      x.length = (a >> 3) + 1;\n      b.nextBytes(x);\n\n      if (t > 0) {\n        x[0] &= (1 << t) - 1;\n      } else {\n        x[0] = 0;\n      }\n\n      this.fromString(x, 256);\n    }\n  };\n\n  return BigInteger;\n}();\n\nexport { BigInteger }; //#region REDUCERS\n//#region NullExp\n\nvar NullExp =\n/** @class */\nfunction () {\n  function NullExp() {} // NullExp.prototype.convert = nNop;\n\n\n  NullExp.prototype.convert = function (x) {\n    return x;\n  }; // NullExp.prototype.revert = nNop;\n\n\n  NullExp.prototype.revert = function (x) {\n    return x;\n  }; // NullExp.prototype.mulTo = nMulTo;\n\n\n  NullExp.prototype.mulTo = function (x, y, r) {\n    x.multiplyTo(y, r);\n  }; // NullExp.prototype.sqrTo = nSqrTo;\n\n\n  NullExp.prototype.sqrTo = function (x, r) {\n    x.squareTo(r);\n  };\n\n  return NullExp;\n}(); // Modular reduction using \"classic\" algorithm\n\n\nvar Classic =\n/** @class */\nfunction () {\n  function Classic(m) {\n    this.m = m;\n  } // Classic.prototype.convert = cConvert;\n\n\n  Classic.prototype.convert = function (x) {\n    if (x.s < 0 || x.compareTo(this.m) >= 0) {\n      return x.mod(this.m);\n    } else {\n      return x;\n    }\n  }; // Classic.prototype.revert = cRevert;\n\n\n  Classic.prototype.revert = function (x) {\n    return x;\n  }; // Classic.prototype.reduce = cReduce;\n\n\n  Classic.prototype.reduce = function (x) {\n    x.divRemTo(this.m, null, x);\n  }; // Classic.prototype.mulTo = cMulTo;\n\n\n  Classic.prototype.mulTo = function (x, y, r) {\n    x.multiplyTo(y, r);\n    this.reduce(r);\n  }; // Classic.prototype.sqrTo = cSqrTo;\n\n\n  Classic.prototype.sqrTo = function (x, r) {\n    x.squareTo(r);\n    this.reduce(r);\n  };\n\n  return Classic;\n}(); //#endregion\n//#region Montgomery\n// Montgomery reduction\n\n\nvar Montgomery =\n/** @class */\nfunction () {\n  function Montgomery(m) {\n    this.m = m;\n    this.mp = m.invDigit();\n    this.mpl = this.mp & 0x7fff;\n    this.mph = this.mp >> 15;\n    this.um = (1 << m.DB - 15) - 1;\n    this.mt2 = 2 * m.t;\n  } // Montgomery.prototype.convert = montConvert;\n  // xR mod m\n\n\n  Montgomery.prototype.convert = function (x) {\n    var r = nbi();\n    x.abs().dlShiftTo(this.m.t, r);\n    r.divRemTo(this.m, null, r);\n\n    if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) {\n      this.m.subTo(r, r);\n    }\n\n    return r;\n  }; // Montgomery.prototype.revert = montRevert;\n  // x/R mod m\n\n\n  Montgomery.prototype.revert = function (x) {\n    var r = nbi();\n    x.copyTo(r);\n    this.reduce(r);\n    return r;\n  }; // Montgomery.prototype.reduce = montReduce;\n  // x = x/R mod m (HAC 14.32)\n\n\n  Montgomery.prototype.reduce = function (x) {\n    while (x.t <= this.mt2) {\n      // pad x so am has enough room later\n      x[x.t++] = 0;\n    }\n\n    for (var i = 0; i < this.m.t; ++i) {\n      // faster way of calculating u0 = x[i]*mp mod DV\n      var j = x[i] & 0x7fff;\n      var u0 = j * this.mpl + ((j * this.mph + (x[i] >> 15) * this.mpl & this.um) << 15) & x.DM; // use am to combine the multiply-shift-add into one call\n\n      j = i + this.m.t;\n      x[j] += this.m.am(0, u0, x, i, 0, this.m.t); // propagate carry\n\n      while (x[j] >= x.DV) {\n        x[j] -= x.DV;\n        x[++j]++;\n      }\n    }\n\n    x.clamp();\n    x.drShiftTo(this.m.t, x);\n\n    if (x.compareTo(this.m) >= 0) {\n      x.subTo(this.m, x);\n    }\n  }; // Montgomery.prototype.mulTo = montMulTo;\n  // r = \"xy/R mod m\"; x,y != r\n\n\n  Montgomery.prototype.mulTo = function (x, y, r) {\n    x.multiplyTo(y, r);\n    this.reduce(r);\n  }; // Montgomery.prototype.sqrTo = montSqrTo;\n  // r = \"x^2/R mod m\"; x != r\n\n\n  Montgomery.prototype.sqrTo = function (x, r) {\n    x.squareTo(r);\n    this.reduce(r);\n  };\n\n  return Montgomery;\n}(); //#endregion Montgomery\n//#region Barrett\n// Barrett modular reduction\n\n\nvar Barrett =\n/** @class */\nfunction () {\n  function Barrett(m) {\n    this.m = m; // setup Barrett\n\n    this.r2 = nbi();\n    this.q3 = nbi();\n    BigInteger.ONE.dlShiftTo(2 * m.t, this.r2);\n    this.mu = this.r2.divide(m);\n  } // Barrett.prototype.convert = barrettConvert;\n\n\n  Barrett.prototype.convert = function (x) {\n    if (x.s < 0 || x.t > 2 * this.m.t) {\n      return x.mod(this.m);\n    } else if (x.compareTo(this.m) < 0) {\n      return x;\n    } else {\n      var r = nbi();\n      x.copyTo(r);\n      this.reduce(r);\n      return r;\n    }\n  }; // Barrett.prototype.revert = barrettRevert;\n\n\n  Barrett.prototype.revert = function (x) {\n    return x;\n  }; // Barrett.prototype.reduce = barrettReduce;\n  // x = x mod m (HAC 14.42)\n\n\n  Barrett.prototype.reduce = function (x) {\n    x.drShiftTo(this.m.t - 1, this.r2);\n\n    if (x.t > this.m.t + 1) {\n      x.t = this.m.t + 1;\n      x.clamp();\n    }\n\n    this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);\n    this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);\n\n    while (x.compareTo(this.r2) < 0) {\n      x.dAddOffset(1, this.m.t + 1);\n    }\n\n    x.subTo(this.r2, x);\n\n    while (x.compareTo(this.m) >= 0) {\n      x.subTo(this.m, x);\n    }\n  }; // Barrett.prototype.mulTo = barrettMulTo;\n  // r = x*y mod m; x,y != r\n\n\n  Barrett.prototype.mulTo = function (x, y, r) {\n    x.multiplyTo(y, r);\n    this.reduce(r);\n  }; // Barrett.prototype.sqrTo = barrettSqrTo;\n  // r = x^2 mod m; x != r\n\n\n  Barrett.prototype.sqrTo = function (x, r) {\n    x.squareTo(r);\n    this.reduce(r);\n  };\n\n  return Barrett;\n}(); //#endregion\n//#endregion REDUCERS\n// return new, unset BigInteger\n\n\nexport function nbi() {\n  return new BigInteger(null);\n}\nexport function parseBigInt(str, r) {\n  return new BigInteger(str, r);\n} // am: Compute w_j += (x*this_i), propagate carries,\n// c is initial carry, returns final carry.\n// c < 3*dvalue, x < 2*dvalue, this_i < dvalue\n// We need to select the fastest one that works in this environment.\n\nvar inBrowser = typeof navigator !== \"undefined\";\n\nif (inBrowser && j_lm && navigator.appName == \"Microsoft Internet Explorer\") {\n  // am2 avoids a big mult-and-extract completely.\n  // Max digit bits should be <= 30 because we do bitwise ops\n  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\n  BigInteger.prototype.am = function am2(i, x, w, j, c, n) {\n    var xl = x & 0x7fff;\n    var xh = x >> 15;\n\n    while (--n >= 0) {\n      var l = this[i] & 0x7fff;\n      var h = this[i++] >> 15;\n      var m = xh * l + h * xl;\n      l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff);\n      c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);\n      w[j++] = l & 0x3fffffff;\n    }\n\n    return c;\n  };\n\n  dbits = 30;\n} else if (inBrowser && j_lm && navigator.appName != \"Netscape\") {\n  // am1: use a single mult and divide to get the high bits,\n  // max digit bits should be 26 because\n  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)\n  BigInteger.prototype.am = function am1(i, x, w, j, c, n) {\n    while (--n >= 0) {\n      var v = x * this[i++] + w[j] + c;\n      c = Math.floor(v / 0x4000000);\n      w[j++] = v & 0x3ffffff;\n    }\n\n    return c;\n  };\n\n  dbits = 26;\n} else {\n  // Mozilla/Netscape seems to prefer am3\n  // Alternately, set max digit bits to 28 since some\n  // browsers slow down when dealing with 32-bit numbers.\n  BigInteger.prototype.am = function am3(i, x, w, j, c, n) {\n    var xl = x & 0x3fff;\n    var xh = x >> 14;\n\n    while (--n >= 0) {\n      var l = this[i] & 0x3fff;\n      var h = this[i++] >> 14;\n      var m = xh * l + h * xl;\n      l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;\n      c = (l >> 28) + (m >> 14) + xh * h;\n      w[j++] = l & 0xfffffff;\n    }\n\n    return c;\n  };\n\n  dbits = 28;\n}\n\nBigInteger.prototype.DB = dbits;\nBigInteger.prototype.DM = (1 << dbits) - 1;\nBigInteger.prototype.DV = 1 << dbits;\nvar BI_FP = 52;\nBigInteger.prototype.FV = Math.pow(2, BI_FP);\nBigInteger.prototype.F1 = BI_FP - dbits;\nBigInteger.prototype.F2 = 2 * dbits - BI_FP; // Digit conversions\n\nvar BI_RC = [];\nvar rr;\nvar vv;\nrr = \"0\".charCodeAt(0);\n\nfor (vv = 0; vv <= 9; ++vv) {\n  BI_RC[rr++] = vv;\n}\n\nrr = \"a\".charCodeAt(0);\n\nfor (vv = 10; vv < 36; ++vv) {\n  BI_RC[rr++] = vv;\n}\n\nrr = \"A\".charCodeAt(0);\n\nfor (vv = 10; vv < 36; ++vv) {\n  BI_RC[rr++] = vv;\n}\n\nexport function intAt(s, i) {\n  var c = BI_RC[s.charCodeAt(i)];\n  return c == null ? -1 : c;\n} // return bigint initialized to value\n\nexport function nbv(i) {\n  var r = nbi();\n  r.fromInt(i);\n  return r;\n} // returns bit length of the integer x\n\nexport function nbits(x) {\n  var r = 1;\n  var t;\n\n  if ((t = x >>> 16) != 0) {\n    x = t;\n    r += 16;\n  }\n\n  if ((t = x >> 8) != 0) {\n    x = t;\n    r += 8;\n  }\n\n  if ((t = x >> 4) != 0) {\n    x = t;\n    r += 4;\n  }\n\n  if ((t = x >> 2) != 0) {\n    x = t;\n    r += 2;\n  }\n\n  if ((t = x >> 1) != 0) {\n    x = t;\n    r += 1;\n  }\n\n  return r;\n} // \"constants\"\n\nBigInteger.ZERO = nbv(0);\nBigInteger.ONE = nbv(1);","map":{"version":3,"sources":["/Users/sid/Desktop/SSOB/sso/client/node_modules/jsencrypt/lib/lib/jsbn/jsbn.js"],"names":["cbit","int2char","lbit","op_and","op_andnot","op_or","op_xor","dbits","canary","j_lm","lowprimes","lplim","length","BigInteger","a","b","c","fromNumber","fromString","prototype","toString","s","negate","k","toRadix","km","d","m","r","i","t","p","DB","nbi","ZERO","subTo","abs","compareTo","bitLength","nbits","DM","mod","divRemTo","modPowInt","e","z","isEven","Classic","Montgomery","exp","clone","copyTo","intValue","DV","byteValue","shortValue","signum","toByteArray","equals","min","max","and","bitwiseTo","or","xor","andNot","not","shiftLeft","n","rShiftTo","lShiftTo","shiftRight","getLowestSetBit","bitCount","x","testBit","j","Math","floor","setBit","changeBit","clearBit","flipBit","add","addTo","subtract","multiply","multiplyTo","divide","remainder","divideAndRemainder","q","modPow","nbv","Barrett","g","k1","convert","g2","sqrTo","mulTo","w","is1","r2","revert","modInverse","ac","u","v","ONE","pow","NullExp","gcd","y","isProbablePrime","modInt","millerRabin","fromInt","fromRadix","mi","sh","intAt","charAt","clamp","dlShiftTo","drShiftTo","bs","cbs","bm","ds","am","squareTo","pm","pt","ts","ms","nsh","ys","y0","yt","F1","F2","d1","FV","d2","qd","invDigit","chunkSize","LN2","log","cs","substr","dMultiply","dAddOffset","nextBytes","op","f","multiplyLowerTo","multiplyUpperTo","n1","random","square","gcda","callback","gcda1","setTimeout","fromNumberAsync","bnp_1","bnpfn1_1","reduce","mp","mpl","mph","um","mt2","u0","q3","mu","parseBigInt","str","inBrowser","navigator","appName","am2","xl","xh","l","h","am1","am3","BI_FP","BI_RC","rr","vv","charCodeAt"],"mappings":"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","sourcesContent":["// Copyright (c) 2005  Tom Wu\n// All Rights Reserved.\n// See \"LICENSE\" for details.\n// Basic JavaScript BN library - subset useful for RSA encryption.\nimport { cbit, int2char, lbit, op_and, op_andnot, op_or, op_xor } from \"./util\";\n// Bits per digit\nvar dbits;\n// JavaScript engine analysis\nvar canary = 0xdeadbeefcafe;\nvar j_lm = ((canary & 0xffffff) == 0xefcafe);\n//#region\nvar lowprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\nvar lplim = (1 << 26) / lowprimes[lowprimes.length - 1];\n//#endregion\n// (public) Constructor\nvar BigInteger = /** @class */ (function () {\n    function BigInteger(a, b, c) {\n        if (a != null) {\n            if (\"number\" == typeof a) {\n                this.fromNumber(a, b, c);\n            }\n            else if (b == null && \"string\" != typeof a) {\n                this.fromString(a, 256);\n            }\n            else {\n                this.fromString(a, b);\n            }\n        }\n    }\n    //#region PUBLIC\n    // BigInteger.prototype.toString = bnToString;\n    // (public) return string representation in given radix\n    BigInteger.prototype.toString = function (b) {\n        if (this.s < 0) {\n            return \"-\" + this.negate().toString(b);\n        }\n        var k;\n        if (b == 16) {\n            k = 4;\n        }\n        else if (b == 8) {\n            k = 3;\n        }\n        else if (b == 2) {\n            k = 1;\n        }\n        else if (b == 32) {\n            k = 5;\n        }\n        else if (b == 4) {\n            k = 2;\n        }\n        else {\n            return this.toRadix(b);\n        }\n        var km = (1 << k) - 1;\n        var d;\n        var m = false;\n        var r = \"\";\n        var i = this.t;\n        var p = this.DB - (i * this.DB) % k;\n        if (i-- > 0) {\n            if (p < this.DB && (d = this[i] >> p) > 0) {\n                m = true;\n                r = int2char(d);\n            }\n            while (i >= 0) {\n                if (p < k) {\n                    d = (this[i] & ((1 << p) - 1)) << (k - p);\n                    d |= this[--i] >> (p += this.DB - k);\n                }\n                else {\n                    d = (this[i] >> (p -= k)) & km;\n                    if (p <= 0) {\n                        p += this.DB;\n                        --i;\n                    }\n                }\n                if (d > 0) {\n                    m = true;\n                }\n                if (m) {\n                    r += int2char(d);\n                }\n            }\n        }\n        return m ? r : \"0\";\n    };\n    // BigInteger.prototype.negate = bnNegate;\n    // (public) -this\n    BigInteger.prototype.negate = function () {\n        var r = nbi();\n        BigInteger.ZERO.subTo(this, r);\n        return r;\n    };\n    // BigInteger.prototype.abs = bnAbs;\n    // (public) |this|\n    BigInteger.prototype.abs = function () {\n        return (this.s < 0) ? this.negate() : this;\n    };\n    // BigInteger.prototype.compareTo = bnCompareTo;\n    // (public) return + if this > a, - if this < a, 0 if equal\n    BigInteger.prototype.compareTo = function (a) {\n        var r = this.s - a.s;\n        if (r != 0) {\n            return r;\n        }\n        var i = this.t;\n        r = i - a.t;\n        if (r != 0) {\n            return (this.s < 0) ? -r : r;\n        }\n        while (--i >= 0) {\n            if ((r = this[i] - a[i]) != 0) {\n                return r;\n            }\n        }\n        return 0;\n    };\n    // BigInteger.prototype.bitLength = bnBitLength;\n    // (public) return the number of bits in \"this\"\n    BigInteger.prototype.bitLength = function () {\n        if (this.t <= 0) {\n            return 0;\n        }\n        return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ (this.s & this.DM));\n    };\n    // BigInteger.prototype.mod = bnMod;\n    // (public) this mod a\n    BigInteger.prototype.mod = function (a) {\n        var r = nbi();\n        this.abs().divRemTo(a, null, r);\n        if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) {\n            a.subTo(r, r);\n        }\n        return r;\n    };\n    // BigInteger.prototype.modPowInt = bnModPowInt;\n    // (public) this^e % m, 0 <= e < 2^32\n    BigInteger.prototype.modPowInt = function (e, m) {\n        var z;\n        if (e < 256 || m.isEven()) {\n            z = new Classic(m);\n        }\n        else {\n            z = new Montgomery(m);\n        }\n        return this.exp(e, z);\n    };\n    // BigInteger.prototype.clone = bnClone;\n    // (public)\n    BigInteger.prototype.clone = function () {\n        var r = nbi();\n        this.copyTo(r);\n        return r;\n    };\n    // BigInteger.prototype.intValue = bnIntValue;\n    // (public) return value as integer\n    BigInteger.prototype.intValue = function () {\n        if (this.s < 0) {\n            if (this.t == 1) {\n                return this[0] - this.DV;\n            }\n            else if (this.t == 0) {\n                return -1;\n            }\n        }\n        else if (this.t == 1) {\n            return this[0];\n        }\n        else if (this.t == 0) {\n            return 0;\n        }\n        // assumes 16 < DB < 32\n        return ((this[1] & ((1 << (32 - this.DB)) - 1)) << this.DB) | this[0];\n    };\n    // BigInteger.prototype.byteValue = bnByteValue;\n    // (public) return value as byte\n    BigInteger.prototype.byteValue = function () {\n        return (this.t == 0) ? this.s : (this[0] << 24) >> 24;\n    };\n    // BigInteger.prototype.shortValue = bnShortValue;\n    // (public) return value as short (assumes DB>=16)\n    BigInteger.prototype.shortValue = function () {\n        return (this.t == 0) ? this.s : (this[0] << 16) >> 16;\n    };\n    // BigInteger.prototype.signum = bnSigNum;\n    // (public) 0 if this == 0, 1 if this > 0\n    BigInteger.prototype.signum = function () {\n        if (this.s < 0) {\n            return -1;\n        }\n        else if (this.t <= 0 || (this.t == 1 && this[0] <= 0)) {\n            return 0;\n        }\n        else {\n            return 1;\n        }\n    };\n    // BigInteger.prototype.toByteArray = bnToByteArray;\n    // (public) convert to bigendian byte array\n    BigInteger.prototype.toByteArray = function () {\n        var i = this.t;\n        var r = [];\n        r[0] = this.s;\n        var p = this.DB - (i * this.DB) % 8;\n        var d;\n        var k = 0;\n        if (i-- > 0) {\n            if (p < this.DB && (d = this[i] >> p) != (this.s & this.DM) >> p) {\n                r[k++] = d | (this.s << (this.DB - p));\n            }\n            while (i >= 0) {\n                if (p < 8) {\n                    d = (this[i] & ((1 << p) - 1)) << (8 - p);\n                    d |= this[--i] >> (p += this.DB - 8);\n                }\n                else {\n                    d = (this[i] >> (p -= 8)) & 0xff;\n                    if (p <= 0) {\n                        p += this.DB;\n                        --i;\n                    }\n                }\n                if ((d & 0x80) != 0) {\n                    d |= -256;\n                }\n                if (k == 0 && (this.s & 0x80) != (d & 0x80)) {\n                    ++k;\n                }\n                if (k > 0 || d != this.s) {\n                    r[k++] = d;\n                }\n            }\n        }\n        return r;\n    };\n    // BigInteger.prototype.equals = bnEquals;\n    BigInteger.prototype.equals = function (a) {\n        return (this.compareTo(a) == 0);\n    };\n    // BigInteger.prototype.min = bnMin;\n    BigInteger.prototype.min = function (a) {\n        return (this.compareTo(a) < 0) ? this : a;\n    };\n    // BigInteger.prototype.max = bnMax;\n    BigInteger.prototype.max = function (a) {\n        return (this.compareTo(a) > 0) ? this : a;\n    };\n    // BigInteger.prototype.and = bnAnd;\n    BigInteger.prototype.and = function (a) {\n        var r = nbi();\n        this.bitwiseTo(a, op_and, r);\n        return r;\n    };\n    // BigInteger.prototype.or = bnOr;\n    BigInteger.prototype.or = function (a) {\n        var r = nbi();\n        this.bitwiseTo(a, op_or, r);\n        return r;\n    };\n    // BigInteger.prototype.xor = bnXor;\n    BigInteger.prototype.xor = function (a) {\n        var r = nbi();\n        this.bitwiseTo(a, op_xor, r);\n        return r;\n    };\n    // BigInteger.prototype.andNot = bnAndNot;\n    BigInteger.prototype.andNot = function (a) {\n        var r = nbi();\n        this.bitwiseTo(a, op_andnot, r);\n        return r;\n    };\n    // BigInteger.prototype.not = bnNot;\n    // (public) ~this\n    BigInteger.prototype.not = function () {\n        var r = nbi();\n        for (var i = 0; i < this.t; ++i) {\n            r[i] = this.DM & ~this[i];\n        }\n        r.t = this.t;\n        r.s = ~this.s;\n        return r;\n    };\n    // BigInteger.prototype.shiftLeft = bnShiftLeft;\n    // (public) this << n\n    BigInteger.prototype.shiftLeft = function (n) {\n        var r = nbi();\n        if (n < 0) {\n            this.rShiftTo(-n, r);\n        }\n        else {\n            this.lShiftTo(n, r);\n        }\n        return r;\n    };\n    // BigInteger.prototype.shiftRight = bnShiftRight;\n    // (public) this >> n\n    BigInteger.prototype.shiftRight = function (n) {\n        var r = nbi();\n        if (n < 0) {\n            this.lShiftTo(-n, r);\n        }\n        else {\n            this.rShiftTo(n, r);\n        }\n        return r;\n    };\n    // BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;\n    // (public) returns index of lowest 1-bit (or -1 if none)\n    BigInteger.prototype.getLowestSetBit = function () {\n        for (var i = 0; i < this.t; ++i) {\n            if (this[i] != 0) {\n                return i * this.DB + lbit(this[i]);\n            }\n        }\n        if (this.s < 0) {\n            return this.t * this.DB;\n        }\n        return -1;\n    };\n    // BigInteger.prototype.bitCount = bnBitCount;\n    // (public) return number of set bits\n    BigInteger.prototype.bitCount = function () {\n        var r = 0;\n        var x = this.s & this.DM;\n        for (var i = 0; i < this.t; ++i) {\n            r += cbit(this[i] ^ x);\n        }\n        return r;\n    };\n    // BigInteger.prototype.testBit = bnTestBit;\n    // (public) true iff nth bit is set\n    BigInteger.prototype.testBit = function (n) {\n        var j = Math.floor(n / this.DB);\n        if (j >= this.t) {\n            return (this.s != 0);\n        }\n        return ((this[j] & (1 << (n % this.DB))) != 0);\n    };\n    // BigInteger.prototype.setBit = bnSetBit;\n    // (public) this | (1<<n)\n    BigInteger.prototype.setBit = function (n) {\n        return this.changeBit(n, op_or);\n    };\n    // BigInteger.prototype.clearBit = bnClearBit;\n    // (public) this & ~(1<<n)\n    BigInteger.prototype.clearBit = function (n) {\n        return this.changeBit(n, op_andnot);\n    };\n    // BigInteger.prototype.flipBit = bnFlipBit;\n    // (public) this ^ (1<<n)\n    BigInteger.prototype.flipBit = function (n) {\n        return this.changeBit(n, op_xor);\n    };\n    // BigInteger.prototype.add = bnAdd;\n    // (public) this + a\n    BigInteger.prototype.add = function (a) {\n        var r = nbi();\n        this.addTo(a, r);\n        return r;\n    };\n    // BigInteger.prototype.subtract = bnSubtract;\n    // (public) this - a\n    BigInteger.prototype.subtract = function (a) {\n        var r = nbi();\n        this.subTo(a, r);\n        return r;\n    };\n    // BigInteger.prototype.multiply = bnMultiply;\n    // (public) this * a\n    BigInteger.prototype.multiply = function (a) {\n        var r = nbi();\n        this.multiplyTo(a, r);\n        return r;\n    };\n    // BigInteger.prototype.divide = bnDivide;\n    // (public) this / a\n    BigInteger.prototype.divide = function (a) {\n        var r = nbi();\n        this.divRemTo(a, r, null);\n        return r;\n    };\n    // BigInteger.prototype.remainder = bnRemainder;\n    // (public) this % a\n    BigInteger.prototype.remainder = function (a) {\n        var r = nbi();\n        this.divRemTo(a, null, r);\n        return r;\n    };\n    // BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;\n    // (public) [this/a,this%a]\n    BigInteger.prototype.divideAndRemainder = function (a) {\n        var q = nbi();\n        var r = nbi();\n        this.divRemTo(a, q, r);\n        return [q, r];\n    };\n    // BigInteger.prototype.modPow = bnModPow;\n    // (public) this^e % m (HAC 14.85)\n    BigInteger.prototype.modPow = function (e, m) {\n        var i = e.bitLength();\n        var k;\n        var r = nbv(1);\n        var z;\n        if (i <= 0) {\n            return r;\n        }\n        else if (i < 18) {\n            k = 1;\n        }\n        else if (i < 48) {\n            k = 3;\n        }\n        else if (i < 144) {\n            k = 4;\n        }\n        else if (i < 768) {\n            k = 5;\n        }\n        else {\n            k = 6;\n        }\n        if (i < 8) {\n            z = new Classic(m);\n        }\n        else if (m.isEven()) {\n            z = new Barrett(m);\n        }\n        else {\n            z = new Montgomery(m);\n        }\n        // precomputation\n        var g = [];\n        var n = 3;\n        var k1 = k - 1;\n        var km = (1 << k) - 1;\n        g[1] = z.convert(this);\n        if (k > 1) {\n            var g2 = nbi();\n            z.sqrTo(g[1], g2);\n            while (n <= km) {\n                g[n] = nbi();\n                z.mulTo(g2, g[n - 2], g[n]);\n                n += 2;\n            }\n        }\n        var j = e.t - 1;\n        var w;\n        var is1 = true;\n        var r2 = nbi();\n        var t;\n        i = nbits(e[j]) - 1;\n        while (j >= 0) {\n            if (i >= k1) {\n                w = (e[j] >> (i - k1)) & km;\n            }\n            else {\n                w = (e[j] & ((1 << (i + 1)) - 1)) << (k1 - i);\n                if (j > 0) {\n                    w |= e[j - 1] >> (this.DB + i - k1);\n                }\n            }\n            n = k;\n            while ((w & 1) == 0) {\n                w >>= 1;\n                --n;\n            }\n            if ((i -= n) < 0) {\n                i += this.DB;\n                --j;\n            }\n            if (is1) { // ret == 1, don't bother squaring or multiplying it\n                g[w].copyTo(r);\n                is1 = false;\n            }\n            else {\n                while (n > 1) {\n                    z.sqrTo(r, r2);\n                    z.sqrTo(r2, r);\n                    n -= 2;\n                }\n                if (n > 0) {\n                    z.sqrTo(r, r2);\n                }\n                else {\n                    t = r;\n                    r = r2;\n                    r2 = t;\n                }\n                z.mulTo(r2, g[w], r);\n            }\n            while (j >= 0 && (e[j] & (1 << i)) == 0) {\n                z.sqrTo(r, r2);\n                t = r;\n                r = r2;\n                r2 = t;\n                if (--i < 0) {\n                    i = this.DB - 1;\n                    --j;\n                }\n            }\n        }\n        return z.revert(r);\n    };\n    // BigInteger.prototype.modInverse = bnModInverse;\n    // (public) 1/this % m (HAC 14.61)\n    BigInteger.prototype.modInverse = function (m) {\n        var ac = m.isEven();\n        if ((this.isEven() && ac) || m.signum() == 0) {\n            return BigInteger.ZERO;\n        }\n        var u = m.clone();\n        var v = this.clone();\n        var a = nbv(1);\n        var b = nbv(0);\n        var c = nbv(0);\n        var d = nbv(1);\n        while (u.signum() != 0) {\n            while (u.isEven()) {\n                u.rShiftTo(1, u);\n                if (ac) {\n                    if (!a.isEven() || !b.isEven()) {\n                        a.addTo(this, a);\n                        b.subTo(m, b);\n                    }\n                    a.rShiftTo(1, a);\n                }\n                else if (!b.isEven()) {\n                    b.subTo(m, b);\n                }\n                b.rShiftTo(1, b);\n            }\n            while (v.isEven()) {\n                v.rShiftTo(1, v);\n                if (ac) {\n                    if (!c.isEven() || !d.isEven()) {\n                        c.addTo(this, c);\n                        d.subTo(m, d);\n                    }\n                    c.rShiftTo(1, c);\n                }\n                else if (!d.isEven()) {\n                    d.subTo(m, d);\n                }\n                d.rShiftTo(1, d);\n            }\n            if (u.compareTo(v) >= 0) {\n                u.subTo(v, u);\n                if (ac) {\n                    a.subTo(c, a);\n                }\n                b.subTo(d, b);\n            }\n            else {\n                v.subTo(u, v);\n                if (ac) {\n                    c.subTo(a, c);\n                }\n                d.subTo(b, d);\n            }\n        }\n        if (v.compareTo(BigInteger.ONE) != 0) {\n            return BigInteger.ZERO;\n        }\n        if (d.compareTo(m) >= 0) {\n            return d.subtract(m);\n        }\n        if (d.signum() < 0) {\n            d.addTo(m, d);\n        }\n        else {\n            return d;\n        }\n        if (d.signum() < 0) {\n            return d.add(m);\n        }\n        else {\n            return d;\n        }\n    };\n    // BigInteger.prototype.pow = bnPow;\n    // (public) this^e\n    BigInteger.prototype.pow = function (e) {\n        return this.exp(e, new NullExp());\n    };\n    // BigInteger.prototype.gcd = bnGCD;\n    // (public) gcd(this,a) (HAC 14.54)\n    BigInteger.prototype.gcd = function (a) {\n        var x = (this.s < 0) ? this.negate() : this.clone();\n        var y = (a.s < 0) ? a.negate() : a.clone();\n        if (x.compareTo(y) < 0) {\n            var t = x;\n            x = y;\n            y = t;\n        }\n        var i = x.getLowestSetBit();\n        var g = y.getLowestSetBit();\n        if (g < 0) {\n            return x;\n        }\n        if (i < g) {\n            g = i;\n        }\n        if (g > 0) {\n            x.rShiftTo(g, x);\n            y.rShiftTo(g, y);\n        }\n        while (x.signum() > 0) {\n            if ((i = x.getLowestSetBit()) > 0) {\n                x.rShiftTo(i, x);\n            }\n            if ((i = y.getLowestSetBit()) > 0) {\n                y.rShiftTo(i, y);\n            }\n            if (x.compareTo(y) >= 0) {\n                x.subTo(y, x);\n                x.rShiftTo(1, x);\n            }\n            else {\n                y.subTo(x, y);\n                y.rShiftTo(1, y);\n            }\n        }\n        if (g > 0) {\n            y.lShiftTo(g, y);\n        }\n        return y;\n    };\n    // BigInteger.prototype.isProbablePrime = bnIsProbablePrime;\n    // (public) test primality with certainty >= 1-.5^t\n    BigInteger.prototype.isProbablePrime = function (t) {\n        var i;\n        var x = this.abs();\n        if (x.t == 1 && x[0] <= lowprimes[lowprimes.length - 1]) {\n            for (i = 0; i < lowprimes.length; ++i) {\n                if (x[0] == lowprimes[i]) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        if (x.isEven()) {\n            return false;\n        }\n        i = 1;\n        while (i < lowprimes.length) {\n            var m = lowprimes[i];\n            var j = i + 1;\n            while (j < lowprimes.length && m < lplim) {\n                m *= lowprimes[j++];\n            }\n            m = x.modInt(m);\n            while (i < j) {\n                if (m % lowprimes[i++] == 0) {\n                    return false;\n                }\n            }\n        }\n        return x.millerRabin(t);\n    };\n    //#endregion PUBLIC\n    //#region PROTECTED\n    // BigInteger.prototype.copyTo = bnpCopyTo;\n    // (protected) copy this to r\n    BigInteger.prototype.copyTo = function (r) {\n        for (var i = this.t - 1; i >= 0; --i) {\n            r[i] = this[i];\n        }\n        r.t = this.t;\n        r.s = this.s;\n    };\n    // BigInteger.prototype.fromInt = bnpFromInt;\n    // (protected) set from integer value x, -DV <= x < DV\n    BigInteger.prototype.fromInt = function (x) {\n        this.t = 1;\n        this.s = (x < 0) ? -1 : 0;\n        if (x > 0) {\n            this[0] = x;\n        }\n        else if (x < -1) {\n            this[0] = x + this.DV;\n        }\n        else {\n            this.t = 0;\n        }\n    };\n    // BigInteger.prototype.fromString = bnpFromString;\n    // (protected) set from string and radix\n    BigInteger.prototype.fromString = function (s, b) {\n        var k;\n        if (b == 16) {\n            k = 4;\n        }\n        else if (b == 8) {\n            k = 3;\n        }\n        else if (b == 256) {\n            k = 8;\n            /* byte array */\n        }\n        else if (b == 2) {\n            k = 1;\n        }\n        else if (b == 32) {\n            k = 5;\n        }\n        else if (b == 4) {\n            k = 2;\n        }\n        else {\n            this.fromRadix(s, b);\n            return;\n        }\n        this.t = 0;\n        this.s = 0;\n        var i = s.length;\n        var mi = false;\n        var sh = 0;\n        while (--i >= 0) {\n            var x = (k == 8) ? (+s[i]) & 0xff : intAt(s, i);\n            if (x < 0) {\n                if (s.charAt(i) == \"-\") {\n                    mi = true;\n                }\n                continue;\n            }\n            mi = false;\n            if (sh == 0) {\n                this[this.t++] = x;\n            }\n            else if (sh + k > this.DB) {\n                this[this.t - 1] |= (x & ((1 << (this.DB - sh)) - 1)) << sh;\n                this[this.t++] = (x >> (this.DB - sh));\n            }\n            else {\n                this[this.t - 1] |= x << sh;\n            }\n            sh += k;\n            if (sh >= this.DB) {\n                sh -= this.DB;\n            }\n        }\n        if (k == 8 && ((+s[0]) & 0x80) != 0) {\n            this.s = -1;\n            if (sh > 0) {\n                this[this.t - 1] |= ((1 << (this.DB - sh)) - 1) << sh;\n            }\n        }\n        this.clamp();\n        if (mi) {\n            BigInteger.ZERO.subTo(this, this);\n        }\n    };\n    // BigInteger.prototype.clamp = bnpClamp;\n    // (protected) clamp off excess high words\n    BigInteger.prototype.clamp = function () {\n        var c = this.s & this.DM;\n        while (this.t > 0 && this[this.t - 1] == c) {\n            --this.t;\n        }\n    };\n    // BigInteger.prototype.dlShiftTo = bnpDLShiftTo;\n    // (protected) r = this << n*DB\n    BigInteger.prototype.dlShiftTo = function (n, r) {\n        var i;\n        for (i = this.t - 1; i >= 0; --i) {\n            r[i + n] = this[i];\n        }\n        for (i = n - 1; i >= 0; --i) {\n            r[i] = 0;\n        }\n        r.t = this.t + n;\n        r.s = this.s;\n    };\n    // BigInteger.prototype.drShiftTo = bnpDRShiftTo;\n    // (protected) r = this >> n*DB\n    BigInteger.prototype.drShiftTo = function (n, r) {\n        for (var i = n; i < this.t; ++i) {\n            r[i - n] = this[i];\n        }\n        r.t = Math.max(this.t - n, 0);\n        r.s = this.s;\n    };\n    // BigInteger.prototype.lShiftTo = bnpLShiftTo;\n    // (protected) r = this << n\n    BigInteger.prototype.lShiftTo = function (n, r) {\n        var bs = n % this.DB;\n        var cbs = this.DB - bs;\n        var bm = (1 << cbs) - 1;\n        var ds = Math.floor(n / this.DB);\n        var c = (this.s << bs) & this.DM;\n        for (var i = this.t - 1; i >= 0; --i) {\n            r[i + ds + 1] = (this[i] >> cbs) | c;\n            c = (this[i] & bm) << bs;\n        }\n        for (var i = ds - 1; i >= 0; --i) {\n            r[i] = 0;\n        }\n        r[ds] = c;\n        r.t = this.t + ds + 1;\n        r.s = this.s;\n        r.clamp();\n    };\n    // BigInteger.prototype.rShiftTo = bnpRShiftTo;\n    // (protected) r = this >> n\n    BigInteger.prototype.rShiftTo = function (n, r) {\n        r.s = this.s;\n        var ds = Math.floor(n / this.DB);\n        if (ds >= this.t) {\n            r.t = 0;\n            return;\n        }\n        var bs = n % this.DB;\n        var cbs = this.DB - bs;\n        var bm = (1 << bs) - 1;\n        r[0] = this[ds] >> bs;\n        for (var i = ds + 1; i < this.t; ++i) {\n            r[i - ds - 1] |= (this[i] & bm) << cbs;\n            r[i - ds] = this[i] >> bs;\n        }\n        if (bs > 0) {\n            r[this.t - ds - 1] |= (this.s & bm) << cbs;\n        }\n        r.t = this.t - ds;\n        r.clamp();\n    };\n    // BigInteger.prototype.subTo = bnpSubTo;\n    // (protected) r = this - a\n    BigInteger.prototype.subTo = function (a, r) {\n        var i = 0;\n        var c = 0;\n        var m = Math.min(a.t, this.t);\n        while (i < m) {\n            c += this[i] - a[i];\n            r[i++] = c & this.DM;\n            c >>= this.DB;\n        }\n        if (a.t < this.t) {\n            c -= a.s;\n            while (i < this.t) {\n                c += this[i];\n                r[i++] = c & this.DM;\n                c >>= this.DB;\n            }\n            c += this.s;\n        }\n        else {\n            c += this.s;\n            while (i < a.t) {\n                c -= a[i];\n                r[i++] = c & this.DM;\n                c >>= this.DB;\n            }\n            c -= a.s;\n        }\n        r.s = (c < 0) ? -1 : 0;\n        if (c < -1) {\n            r[i++] = this.DV + c;\n        }\n        else if (c > 0) {\n            r[i++] = c;\n        }\n        r.t = i;\n        r.clamp();\n    };\n    // BigInteger.prototype.multiplyTo = bnpMultiplyTo;\n    // (protected) r = this * a, r != this,a (HAC 14.12)\n    // \"this\" should be the larger one if appropriate.\n    BigInteger.prototype.multiplyTo = function (a, r) {\n        var x = this.abs();\n        var y = a.abs();\n        var i = x.t;\n        r.t = i + y.t;\n        while (--i >= 0) {\n            r[i] = 0;\n        }\n        for (i = 0; i < y.t; ++i) {\n            r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);\n        }\n        r.s = 0;\n        r.clamp();\n        if (this.s != a.s) {\n            BigInteger.ZERO.subTo(r, r);\n        }\n    };\n    // BigInteger.prototype.squareTo = bnpSquareTo;\n    // (protected) r = this^2, r != this (HAC 14.16)\n    BigInteger.prototype.squareTo = function (r) {\n        var x = this.abs();\n        var i = r.t = 2 * x.t;\n        while (--i >= 0) {\n            r[i] = 0;\n        }\n        for (i = 0; i < x.t - 1; ++i) {\n            var c = x.am(i, x[i], r, 2 * i, 0, 1);\n            if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {\n                r[i + x.t] -= x.DV;\n                r[i + x.t + 1] = 1;\n            }\n        }\n        if (r.t > 0) {\n            r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);\n        }\n        r.s = 0;\n        r.clamp();\n    };\n    // BigInteger.prototype.divRemTo = bnpDivRemTo;\n    // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\n    // r != q, this != m.  q or r may be null.\n    BigInteger.prototype.divRemTo = function (m, q, r) {\n        var pm = m.abs();\n        if (pm.t <= 0) {\n            return;\n        }\n        var pt = this.abs();\n        if (pt.t < pm.t) {\n            if (q != null) {\n                q.fromInt(0);\n            }\n            if (r != null) {\n                this.copyTo(r);\n            }\n            return;\n        }\n        if (r == null) {\n            r = nbi();\n        }\n        var y = nbi();\n        var ts = this.s;\n        var ms = m.s;\n        var nsh = this.DB - nbits(pm[pm.t - 1]); // normalize modulus\n        if (nsh > 0) {\n            pm.lShiftTo(nsh, y);\n            pt.lShiftTo(nsh, r);\n        }\n        else {\n            pm.copyTo(y);\n            pt.copyTo(r);\n        }\n        var ys = y.t;\n        var y0 = y[ys - 1];\n        if (y0 == 0) {\n            return;\n        }\n        var yt = y0 * (1 << this.F1) + ((ys > 1) ? y[ys - 2] >> this.F2 : 0);\n        var d1 = this.FV / yt;\n        var d2 = (1 << this.F1) / yt;\n        var e = 1 << this.F2;\n        var i = r.t;\n        var j = i - ys;\n        var t = (q == null) ? nbi() : q;\n        y.dlShiftTo(j, t);\n        if (r.compareTo(t) >= 0) {\n            r[r.t++] = 1;\n            r.subTo(t, r);\n        }\n        BigInteger.ONE.dlShiftTo(ys, t);\n        t.subTo(y, y); // \"negative\" y so we can replace sub with am later\n        while (y.t < ys) {\n            y[y.t++] = 0;\n        }\n        while (--j >= 0) {\n            // Estimate quotient digit\n            var qd = (r[--i] == y0) ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);\n            if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) { // Try it out\n                y.dlShiftTo(j, t);\n                r.subTo(t, r);\n                while (r[i] < --qd) {\n                    r.subTo(t, r);\n                }\n            }\n        }\n        if (q != null) {\n            r.drShiftTo(ys, q);\n            if (ts != ms) {\n                BigInteger.ZERO.subTo(q, q);\n            }\n        }\n        r.t = ys;\n        r.clamp();\n        if (nsh > 0) {\n            r.rShiftTo(nsh, r);\n        } // Denormalize remainder\n        if (ts < 0) {\n            BigInteger.ZERO.subTo(r, r);\n        }\n    };\n    // BigInteger.prototype.invDigit = bnpInvDigit;\n    // (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\n    // justification:\n    //         xy == 1 (mod m)\n    //         xy =  1+km\n    //   xy(2-xy) = (1+km)(1-km)\n    // x[y(2-xy)] = 1-k^2m^2\n    // x[y(2-xy)] == 1 (mod m^2)\n    // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\n    // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\n    // JS multiply \"overflows\" differently from C/C++, so care is needed here.\n    BigInteger.prototype.invDigit = function () {\n        if (this.t < 1) {\n            return 0;\n        }\n        var x = this[0];\n        if ((x & 1) == 0) {\n            return 0;\n        }\n        var y = x & 3; // y == 1/x mod 2^2\n        y = (y * (2 - (x & 0xf) * y)) & 0xf; // y == 1/x mod 2^4\n        y = (y * (2 - (x & 0xff) * y)) & 0xff; // y == 1/x mod 2^8\n        y = (y * (2 - (((x & 0xffff) * y) & 0xffff))) & 0xffff; // y == 1/x mod 2^16\n        // last step - calculate inverse mod DV directly;\n        // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\n        y = (y * (2 - x * y % this.DV)) % this.DV; // y == 1/x mod 2^dbits\n        // we really want the negative inverse, and -DV < y < DV\n        return (y > 0) ? this.DV - y : -y;\n    };\n    // BigInteger.prototype.isEven = bnpIsEven;\n    // (protected) true iff this is even\n    BigInteger.prototype.isEven = function () {\n        return ((this.t > 0) ? (this[0] & 1) : this.s) == 0;\n    };\n    // BigInteger.prototype.exp = bnpExp;\n    // (protected) this^e, e < 2^32, doing sqr and mul with \"r\" (HAC 14.79)\n    BigInteger.prototype.exp = function (e, z) {\n        if (e > 0xffffffff || e < 1) {\n            return BigInteger.ONE;\n        }\n        var r = nbi();\n        var r2 = nbi();\n        var g = z.convert(this);\n        var i = nbits(e) - 1;\n        g.copyTo(r);\n        while (--i >= 0) {\n            z.sqrTo(r, r2);\n            if ((e & (1 << i)) > 0) {\n                z.mulTo(r2, g, r);\n            }\n            else {\n                var t = r;\n                r = r2;\n                r2 = t;\n            }\n        }\n        return z.revert(r);\n    };\n    // BigInteger.prototype.chunkSize = bnpChunkSize;\n    // (protected) return x s.t. r^x < DV\n    BigInteger.prototype.chunkSize = function (r) {\n        return Math.floor(Math.LN2 * this.DB / Math.log(r));\n    };\n    // BigInteger.prototype.toRadix = bnpToRadix;\n    // (protected) convert to radix string\n    BigInteger.prototype.toRadix = function (b) {\n        if (b == null) {\n            b = 10;\n        }\n        if (this.signum() == 0 || b < 2 || b > 36) {\n            return \"0\";\n        }\n        var cs = this.chunkSize(b);\n        var a = Math.pow(b, cs);\n        var d = nbv(a);\n        var y = nbi();\n        var z = nbi();\n        var r = \"\";\n        this.divRemTo(d, y, z);\n        while (y.signum() > 0) {\n            r = (a + z.intValue()).toString(b).substr(1) + r;\n            y.divRemTo(d, y, z);\n        }\n        return z.intValue().toString(b) + r;\n    };\n    // BigInteger.prototype.fromRadix = bnpFromRadix;\n    // (protected) convert from radix string\n    BigInteger.prototype.fromRadix = function (s, b) {\n        this.fromInt(0);\n        if (b == null) {\n            b = 10;\n        }\n        var cs = this.chunkSize(b);\n        var d = Math.pow(b, cs);\n        var mi = false;\n        var j = 0;\n        var w = 0;\n        for (var i = 0; i < s.length; ++i) {\n            var x = intAt(s, i);\n            if (x < 0) {\n                if (s.charAt(i) == \"-\" && this.signum() == 0) {\n                    mi = true;\n                }\n                continue;\n            }\n            w = b * w + x;\n            if (++j >= cs) {\n                this.dMultiply(d);\n                this.dAddOffset(w, 0);\n                j = 0;\n                w = 0;\n            }\n        }\n        if (j > 0) {\n            this.dMultiply(Math.pow(b, j));\n            this.dAddOffset(w, 0);\n        }\n        if (mi) {\n            BigInteger.ZERO.subTo(this, this);\n        }\n    };\n    // BigInteger.prototype.fromNumber = bnpFromNumber;\n    // (protected) alternate constructor\n    BigInteger.prototype.fromNumber = function (a, b, c) {\n        if (\"number\" == typeof b) {\n            // new BigInteger(int,int,RNG)\n            if (a < 2) {\n                this.fromInt(1);\n            }\n            else {\n                this.fromNumber(a, c);\n                if (!this.testBit(a - 1)) {\n                    // force MSB set\n                    this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this);\n                }\n                if (this.isEven()) {\n                    this.dAddOffset(1, 0);\n                } // force odd\n                while (!this.isProbablePrime(b)) {\n                    this.dAddOffset(2, 0);\n                    if (this.bitLength() > a) {\n                        this.subTo(BigInteger.ONE.shiftLeft(a - 1), this);\n                    }\n                }\n            }\n        }\n        else {\n            // new BigInteger(int,RNG)\n            var x = [];\n            var t = a & 7;\n            x.length = (a >> 3) + 1;\n            b.nextBytes(x);\n            if (t > 0) {\n                x[0] &= ((1 << t) - 1);\n            }\n            else {\n                x[0] = 0;\n            }\n            this.fromString(x, 256);\n        }\n    };\n    // BigInteger.prototype.bitwiseTo = bnpBitwiseTo;\n    // (protected) r = this op a (bitwise)\n    BigInteger.prototype.bitwiseTo = function (a, op, r) {\n        var i;\n        var f;\n        var m = Math.min(a.t, this.t);\n        for (i = 0; i < m; ++i) {\n            r[i] = op(this[i], a[i]);\n        }\n        if (a.t < this.t) {\n            f = a.s & this.DM;\n            for (i = m; i < this.t; ++i) {\n                r[i] = op(this[i], f);\n            }\n            r.t = this.t;\n        }\n        else {\n            f = this.s & this.DM;\n            for (i = m; i < a.t; ++i) {\n                r[i] = op(f, a[i]);\n            }\n            r.t = a.t;\n        }\n        r.s = op(this.s, a.s);\n        r.clamp();\n    };\n    // BigInteger.prototype.changeBit = bnpChangeBit;\n    // (protected) this op (1<<n)\n    BigInteger.prototype.changeBit = function (n, op) {\n        var r = BigInteger.ONE.shiftLeft(n);\n        this.bitwiseTo(r, op, r);\n        return r;\n    };\n    // BigInteger.prototype.addTo = bnpAddTo;\n    // (protected) r = this + a\n    BigInteger.prototype.addTo = function (a, r) {\n        var i = 0;\n        var c = 0;\n        var m = Math.min(a.t, this.t);\n        while (i < m) {\n            c += this[i] + a[i];\n            r[i++] = c & this.DM;\n            c >>= this.DB;\n        }\n        if (a.t < this.t) {\n            c += a.s;\n            while (i < this.t) {\n                c += this[i];\n                r[i++] = c & this.DM;\n                c >>= this.DB;\n            }\n            c += this.s;\n        }\n        else {\n            c += this.s;\n            while (i < a.t) {\n                c += a[i];\n                r[i++] = c & this.DM;\n                c >>= this.DB;\n            }\n            c += a.s;\n        }\n        r.s = (c < 0) ? -1 : 0;\n        if (c > 0) {\n            r[i++] = c;\n        }\n        else if (c < -1) {\n            r[i++] = this.DV + c;\n        }\n        r.t = i;\n        r.clamp();\n    };\n    // BigInteger.prototype.dMultiply = bnpDMultiply;\n    // (protected) this *= n, this >= 0, 1 < n < DV\n    BigInteger.prototype.dMultiply = function (n) {\n        this[this.t] = this.am(0, n - 1, this, 0, 0, this.t);\n        ++this.t;\n        this.clamp();\n    };\n    // BigInteger.prototype.dAddOffset = bnpDAddOffset;\n    // (protected) this += n << w words, this >= 0\n    BigInteger.prototype.dAddOffset = function (n, w) {\n        if (n == 0) {\n            return;\n        }\n        while (this.t <= w) {\n            this[this.t++] = 0;\n        }\n        this[w] += n;\n        while (this[w] >= this.DV) {\n            this[w] -= this.DV;\n            if (++w >= this.t) {\n                this[this.t++] = 0;\n            }\n            ++this[w];\n        }\n    };\n    // BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;\n    // (protected) r = lower n words of \"this * a\", a.t <= n\n    // \"this\" should be the larger one if appropriate.\n    BigInteger.prototype.multiplyLowerTo = function (a, n, r) {\n        var i = Math.min(this.t + a.t, n);\n        r.s = 0; // assumes a,this >= 0\n        r.t = i;\n        while (i > 0) {\n            r[--i] = 0;\n        }\n        for (var j = r.t - this.t; i < j; ++i) {\n            r[i + this.t] = this.am(0, a[i], r, i, 0, this.t);\n        }\n        for (var j = Math.min(a.t, n); i < j; ++i) {\n            this.am(0, a[i], r, i, 0, n - i);\n        }\n        r.clamp();\n    };\n    // BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;\n    // (protected) r = \"this * a\" without lower n words, n > 0\n    // \"this\" should be the larger one if appropriate.\n    BigInteger.prototype.multiplyUpperTo = function (a, n, r) {\n        --n;\n        var i = r.t = this.t + a.t - n;\n        r.s = 0; // assumes a,this >= 0\n        while (--i >= 0) {\n            r[i] = 0;\n        }\n        for (i = Math.max(n - this.t, 0); i < a.t; ++i) {\n            r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n);\n        }\n        r.clamp();\n        r.drShiftTo(1, r);\n    };\n    // BigInteger.prototype.modInt = bnpModInt;\n    // (protected) this % n, n < 2^26\n    BigInteger.prototype.modInt = function (n) {\n        if (n <= 0) {\n            return 0;\n        }\n        var d = this.DV % n;\n        var r = (this.s < 0) ? n - 1 : 0;\n        if (this.t > 0) {\n            if (d == 0) {\n                r = this[0] % n;\n            }\n            else {\n                for (var i = this.t - 1; i >= 0; --i) {\n                    r = (d * r + this[i]) % n;\n                }\n            }\n        }\n        return r;\n    };\n    // BigInteger.prototype.millerRabin = bnpMillerRabin;\n    // (protected) true if probably prime (HAC 4.24, Miller-Rabin)\n    BigInteger.prototype.millerRabin = function (t) {\n        var n1 = this.subtract(BigInteger.ONE);\n        var k = n1.getLowestSetBit();\n        if (k <= 0) {\n            return false;\n        }\n        var r = n1.shiftRight(k);\n        t = (t + 1) >> 1;\n        if (t > lowprimes.length) {\n            t = lowprimes.length;\n        }\n        var a = nbi();\n        for (var i = 0; i < t; ++i) {\n            // Pick bases at random, instead of starting at 2\n            a.fromInt(lowprimes[Math.floor(Math.random() * lowprimes.length)]);\n            var y = a.modPow(r, this);\n            if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {\n                var j = 1;\n                while (j++ < k && y.compareTo(n1) != 0) {\n                    y = y.modPowInt(2, this);\n                    if (y.compareTo(BigInteger.ONE) == 0) {\n                        return false;\n                    }\n                }\n                if (y.compareTo(n1) != 0) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    };\n    // BigInteger.prototype.square = bnSquare;\n    // (public) this^2\n    BigInteger.prototype.square = function () {\n        var r = nbi();\n        this.squareTo(r);\n        return r;\n    };\n    //#region ASYNC\n    // Public API method\n    BigInteger.prototype.gcda = function (a, callback) {\n        var x = (this.s < 0) ? this.negate() : this.clone();\n        var y = (a.s < 0) ? a.negate() : a.clone();\n        if (x.compareTo(y) < 0) {\n            var t = x;\n            x = y;\n            y = t;\n        }\n        var i = x.getLowestSetBit();\n        var g = y.getLowestSetBit();\n        if (g < 0) {\n            callback(x);\n            return;\n        }\n        if (i < g) {\n            g = i;\n        }\n        if (g > 0) {\n            x.rShiftTo(g, x);\n            y.rShiftTo(g, y);\n        }\n        // Workhorse of the algorithm, gets called 200 - 800 times per 512 bit keygen.\n        var gcda1 = function () {\n            if ((i = x.getLowestSetBit()) > 0) {\n                x.rShiftTo(i, x);\n            }\n            if ((i = y.getLowestSetBit()) > 0) {\n                y.rShiftTo(i, y);\n            }\n            if (x.compareTo(y) >= 0) {\n                x.subTo(y, x);\n                x.rShiftTo(1, x);\n            }\n            else {\n                y.subTo(x, y);\n                y.rShiftTo(1, y);\n            }\n            if (!(x.signum() > 0)) {\n                if (g > 0) {\n                    y.lShiftTo(g, y);\n                }\n                setTimeout(function () { callback(y); }, 0); // escape\n            }\n            else {\n                setTimeout(gcda1, 0);\n            }\n        };\n        setTimeout(gcda1, 10);\n    };\n    // (protected) alternate constructor\n    BigInteger.prototype.fromNumberAsync = function (a, b, c, callback) {\n        if (\"number\" == typeof b) {\n            if (a < 2) {\n                this.fromInt(1);\n            }\n            else {\n                this.fromNumber(a, c);\n                if (!this.testBit(a - 1)) {\n                    this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this);\n                }\n                if (this.isEven()) {\n                    this.dAddOffset(1, 0);\n                }\n                var bnp_1 = this;\n                var bnpfn1_1 = function () {\n                    bnp_1.dAddOffset(2, 0);\n                    if (bnp_1.bitLength() > a) {\n                        bnp_1.subTo(BigInteger.ONE.shiftLeft(a - 1), bnp_1);\n                    }\n                    if (bnp_1.isProbablePrime(b)) {\n                        setTimeout(function () { callback(); }, 0); // escape\n                    }\n                    else {\n                        setTimeout(bnpfn1_1, 0);\n                    }\n                };\n                setTimeout(bnpfn1_1, 0);\n            }\n        }\n        else {\n            var x = [];\n            var t = a & 7;\n            x.length = (a >> 3) + 1;\n            b.nextBytes(x);\n            if (t > 0) {\n                x[0] &= ((1 << t) - 1);\n            }\n            else {\n                x[0] = 0;\n            }\n            this.fromString(x, 256);\n        }\n    };\n    return BigInteger;\n}());\nexport { BigInteger };\n//#region REDUCERS\n//#region NullExp\nvar NullExp = /** @class */ (function () {\n    function NullExp() {\n    }\n    // NullExp.prototype.convert = nNop;\n    NullExp.prototype.convert = function (x) {\n        return x;\n    };\n    // NullExp.prototype.revert = nNop;\n    NullExp.prototype.revert = function (x) {\n        return x;\n    };\n    // NullExp.prototype.mulTo = nMulTo;\n    NullExp.prototype.mulTo = function (x, y, r) {\n        x.multiplyTo(y, r);\n    };\n    // NullExp.prototype.sqrTo = nSqrTo;\n    NullExp.prototype.sqrTo = function (x, r) {\n        x.squareTo(r);\n    };\n    return NullExp;\n}());\n// Modular reduction using \"classic\" algorithm\nvar Classic = /** @class */ (function () {\n    function Classic(m) {\n        this.m = m;\n    }\n    // Classic.prototype.convert = cConvert;\n    Classic.prototype.convert = function (x) {\n        if (x.s < 0 || x.compareTo(this.m) >= 0) {\n            return x.mod(this.m);\n        }\n        else {\n            return x;\n        }\n    };\n    // Classic.prototype.revert = cRevert;\n    Classic.prototype.revert = function (x) {\n        return x;\n    };\n    // Classic.prototype.reduce = cReduce;\n    Classic.prototype.reduce = function (x) {\n        x.divRemTo(this.m, null, x);\n    };\n    // Classic.prototype.mulTo = cMulTo;\n    Classic.prototype.mulTo = function (x, y, r) {\n        x.multiplyTo(y, r);\n        this.reduce(r);\n    };\n    // Classic.prototype.sqrTo = cSqrTo;\n    Classic.prototype.sqrTo = function (x, r) {\n        x.squareTo(r);\n        this.reduce(r);\n    };\n    return Classic;\n}());\n//#endregion\n//#region Montgomery\n// Montgomery reduction\nvar Montgomery = /** @class */ (function () {\n    function Montgomery(m) {\n        this.m = m;\n        this.mp = m.invDigit();\n        this.mpl = this.mp & 0x7fff;\n        this.mph = this.mp >> 15;\n        this.um = (1 << (m.DB - 15)) - 1;\n        this.mt2 = 2 * m.t;\n    }\n    // Montgomery.prototype.convert = montConvert;\n    // xR mod m\n    Montgomery.prototype.convert = function (x) {\n        var r = nbi();\n        x.abs().dlShiftTo(this.m.t, r);\n        r.divRemTo(this.m, null, r);\n        if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) {\n            this.m.subTo(r, r);\n        }\n        return r;\n    };\n    // Montgomery.prototype.revert = montRevert;\n    // x/R mod m\n    Montgomery.prototype.revert = function (x) {\n        var r = nbi();\n        x.copyTo(r);\n        this.reduce(r);\n        return r;\n    };\n    // Montgomery.prototype.reduce = montReduce;\n    // x = x/R mod m (HAC 14.32)\n    Montgomery.prototype.reduce = function (x) {\n        while (x.t <= this.mt2) {\n            // pad x so am has enough room later\n            x[x.t++] = 0;\n        }\n        for (var i = 0; i < this.m.t; ++i) {\n            // faster way of calculating u0 = x[i]*mp mod DV\n            var j = x[i] & 0x7fff;\n            var u0 = (j * this.mpl + (((j * this.mph + (x[i] >> 15) * this.mpl) & this.um) << 15)) & x.DM;\n            // use am to combine the multiply-shift-add into one call\n            j = i + this.m.t;\n            x[j] += this.m.am(0, u0, x, i, 0, this.m.t);\n            // propagate carry\n            while (x[j] >= x.DV) {\n                x[j] -= x.DV;\n                x[++j]++;\n            }\n        }\n        x.clamp();\n        x.drShiftTo(this.m.t, x);\n        if (x.compareTo(this.m) >= 0) {\n            x.subTo(this.m, x);\n        }\n    };\n    // Montgomery.prototype.mulTo = montMulTo;\n    // r = \"xy/R mod m\"; x,y != r\n    Montgomery.prototype.mulTo = function (x, y, r) {\n        x.multiplyTo(y, r);\n        this.reduce(r);\n    };\n    // Montgomery.prototype.sqrTo = montSqrTo;\n    // r = \"x^2/R mod m\"; x != r\n    Montgomery.prototype.sqrTo = function (x, r) {\n        x.squareTo(r);\n        this.reduce(r);\n    };\n    return Montgomery;\n}());\n//#endregion Montgomery\n//#region Barrett\n// Barrett modular reduction\nvar Barrett = /** @class */ (function () {\n    function Barrett(m) {\n        this.m = m;\n        // setup Barrett\n        this.r2 = nbi();\n        this.q3 = nbi();\n        BigInteger.ONE.dlShiftTo(2 * m.t, this.r2);\n        this.mu = this.r2.divide(m);\n    }\n    // Barrett.prototype.convert = barrettConvert;\n    Barrett.prototype.convert = function (x) {\n        if (x.s < 0 || x.t > 2 * this.m.t) {\n            return x.mod(this.m);\n        }\n        else if (x.compareTo(this.m) < 0) {\n            return x;\n        }\n        else {\n            var r = nbi();\n            x.copyTo(r);\n            this.reduce(r);\n            return r;\n        }\n    };\n    // Barrett.prototype.revert = barrettRevert;\n    Barrett.prototype.revert = function (x) {\n        return x;\n    };\n    // Barrett.prototype.reduce = barrettReduce;\n    // x = x mod m (HAC 14.42)\n    Barrett.prototype.reduce = function (x) {\n        x.drShiftTo(this.m.t - 1, this.r2);\n        if (x.t > this.m.t + 1) {\n            x.t = this.m.t + 1;\n            x.clamp();\n        }\n        this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);\n        this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);\n        while (x.compareTo(this.r2) < 0) {\n            x.dAddOffset(1, this.m.t + 1);\n        }\n        x.subTo(this.r2, x);\n        while (x.compareTo(this.m) >= 0) {\n            x.subTo(this.m, x);\n        }\n    };\n    // Barrett.prototype.mulTo = barrettMulTo;\n    // r = x*y mod m; x,y != r\n    Barrett.prototype.mulTo = function (x, y, r) {\n        x.multiplyTo(y, r);\n        this.reduce(r);\n    };\n    // Barrett.prototype.sqrTo = barrettSqrTo;\n    // r = x^2 mod m; x != r\n    Barrett.prototype.sqrTo = function (x, r) {\n        x.squareTo(r);\n        this.reduce(r);\n    };\n    return Barrett;\n}());\n//#endregion\n//#endregion REDUCERS\n// return new, unset BigInteger\nexport function nbi() { return new BigInteger(null); }\nexport function parseBigInt(str, r) {\n    return new BigInteger(str, r);\n}\n// am: Compute w_j += (x*this_i), propagate carries,\n// c is initial carry, returns final carry.\n// c < 3*dvalue, x < 2*dvalue, this_i < dvalue\n// We need to select the fastest one that works in this environment.\nvar inBrowser = typeof navigator !== \"undefined\";\nif (inBrowser && j_lm && (navigator.appName == \"Microsoft Internet Explorer\")) {\n    // am2 avoids a big mult-and-extract completely.\n    // Max digit bits should be <= 30 because we do bitwise ops\n    // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\n    BigInteger.prototype.am = function am2(i, x, w, j, c, n) {\n        var xl = x & 0x7fff;\n        var xh = x >> 15;\n        while (--n >= 0) {\n            var l = this[i] & 0x7fff;\n            var h = this[i++] >> 15;\n            var m = xh * l + h * xl;\n            l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff);\n            c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);\n            w[j++] = l & 0x3fffffff;\n        }\n        return c;\n    };\n    dbits = 30;\n}\nelse if (inBrowser && j_lm && (navigator.appName != \"Netscape\")) {\n    // am1: use a single mult and divide to get the high bits,\n    // max digit bits should be 26 because\n    // max internal value = 2*dvalue^2-2*dvalue (< 2^53)\n    BigInteger.prototype.am = function am1(i, x, w, j, c, n) {\n        while (--n >= 0) {\n            var v = x * this[i++] + w[j] + c;\n            c = Math.floor(v / 0x4000000);\n            w[j++] = v & 0x3ffffff;\n        }\n        return c;\n    };\n    dbits = 26;\n}\nelse { // Mozilla/Netscape seems to prefer am3\n    // Alternately, set max digit bits to 28 since some\n    // browsers slow down when dealing with 32-bit numbers.\n    BigInteger.prototype.am = function am3(i, x, w, j, c, n) {\n        var xl = x & 0x3fff;\n        var xh = x >> 14;\n        while (--n >= 0) {\n            var l = this[i] & 0x3fff;\n            var h = this[i++] >> 14;\n            var m = xh * l + h * xl;\n            l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;\n            c = (l >> 28) + (m >> 14) + xh * h;\n            w[j++] = l & 0xfffffff;\n        }\n        return c;\n    };\n    dbits = 28;\n}\nBigInteger.prototype.DB = dbits;\nBigInteger.prototype.DM = ((1 << dbits) - 1);\nBigInteger.prototype.DV = (1 << dbits);\nvar BI_FP = 52;\nBigInteger.prototype.FV = Math.pow(2, BI_FP);\nBigInteger.prototype.F1 = BI_FP - dbits;\nBigInteger.prototype.F2 = 2 * dbits - BI_FP;\n// Digit conversions\nvar BI_RC = [];\nvar rr;\nvar vv;\nrr = \"0\".charCodeAt(0);\nfor (vv = 0; vv <= 9; ++vv) {\n    BI_RC[rr++] = vv;\n}\nrr = \"a\".charCodeAt(0);\nfor (vv = 10; vv < 36; ++vv) {\n    BI_RC[rr++] = vv;\n}\nrr = \"A\".charCodeAt(0);\nfor (vv = 10; vv < 36; ++vv) {\n    BI_RC[rr++] = vv;\n}\nexport function intAt(s, i) {\n    var c = BI_RC[s.charCodeAt(i)];\n    return (c == null) ? -1 : c;\n}\n// return bigint initialized to value\nexport function nbv(i) {\n    var r = nbi();\n    r.fromInt(i);\n    return r;\n}\n// returns bit length of the integer x\nexport function nbits(x) {\n    var r = 1;\n    var t;\n    if ((t = x >>> 16) != 0) {\n        x = t;\n        r += 16;\n    }\n    if ((t = x >> 8) != 0) {\n        x = t;\n        r += 8;\n    }\n    if ((t = x >> 4) != 0) {\n        x = t;\n        r += 4;\n    }\n    if ((t = x >> 2) != 0) {\n        x = t;\n        r += 2;\n    }\n    if ((t = x >> 1) != 0) {\n        x = t;\n        r += 1;\n    }\n    return r;\n}\n// \"constants\"\nBigInteger.ZERO = nbv(0);\nBigInteger.ONE = nbv(1);\n"]},"metadata":{},"sourceType":"module"}