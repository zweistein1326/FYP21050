{"ast":null,"code":"/* eslint linebreak-style: [\"error\", \"windows\"] */\n\n/* eslint-disable no-use-before-define */\nimport Base from './Base.js';\n/**\r\n * A collection of cipher parameters.\r\n *\r\n * @property {WordArray} ciphertext The raw ciphertext.\r\n * @property {WordArray} key The key to this ciphertext.\r\n * @property {WordArray} iv The IV used in the ciphering operation.\r\n * @property {WordArray} salt The salt used with a key derivation function.\r\n * @property {Cipher} algorithm The cipher algorithm.\r\n * @property {Mode} mode The block mode used in the ciphering operation.\r\n * @property {Padding} padding The padding scheme used in the ciphering operation.\r\n * @property {number} blockSize The block size of the cipher.\r\n * @property {Format} formatter\r\n *    The default formatting strategy to convert this cipher params object to a string.\r\n */\n\nexport default class CipherParams extends Base {\n  /**\r\n     * Initializes a newly created cipher params object.\r\n     *\r\n     * @param {Object} cipherParams An object with any of the possible cipher parameters.\r\n     *\r\n     * @example\r\n     *\r\n     *     var cipherParams = CryptoJS.lib.CipherParams.create({\r\n     *         ciphertext: ciphertextWordArray,\r\n     *         key: keyWordArray,\r\n     *         iv: ivWordArray,\r\n     *         salt: saltWordArray,\r\n     *         algorithm: CryptoJS.algo.AES,\r\n     *         mode: CryptoJS.mode.CBC,\r\n     *         padding: CryptoJS.pad.PKCS7,\r\n     *         blockSize: 4,\r\n     *         formatter: CryptoJS.format.OpenSSL\r\n     *     });\r\n     */\n  constructor(cipherParams) {\n    super();\n    this.mixIn(cipherParams);\n  }\n  /**\r\n     * Converts this cipher params object to a string.\r\n     *\r\n     * @param {Format} formatter (Optional) The formatting strategy to use.\r\n     *\r\n     * @return {string} The stringified cipher params.\r\n     *\r\n     * @throws Error If neither the formatter nor the default formatter is set.\r\n     *\r\n     * @example\r\n     *\r\n     *     var string = cipherParams + '';\r\n     *     var string = cipherParams.toString();\r\n     *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);\r\n     */\n\n\n  toString(formatter) {\n    return (formatter || this.formatter).stringify(this);\n  }\n\n}","map":{"version":3,"sources":["/Users/sid/Desktop/SSOB/sso/client/node_modules/react-native-hash/JSHash/lib/core/CipherParams.js"],"names":["Base","CipherParams","constructor","cipherParams","mixIn","toString","formatter","stringify"],"mappings":"AAAA;;AACA;AAEA,OAAOA,IAAP,MAAiB,WAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,YAAN,SAA2BD,IAA3B,CAAgC;AAC7C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEE,EAAAA,WAAW,CAACC,YAAD,EAAe;AACxB;AAEA,SAAKC,KAAL,CAAWD,YAAX;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEE,EAAAA,QAAQ,CAACC,SAAD,EAAY;AAClB,WAAO,CAACA,SAAS,IAAI,KAAKA,SAAnB,EAA8BC,SAA9B,CAAwC,IAAxC,CAAP;AACD;;AA3C4C","sourcesContent":["/* eslint linebreak-style: [\"error\", \"windows\"] */\r\n/* eslint-disable no-use-before-define */\r\n\r\nimport Base from './Base.js';\r\n\r\n/**\r\n * A collection of cipher parameters.\r\n *\r\n * @property {WordArray} ciphertext The raw ciphertext.\r\n * @property {WordArray} key The key to this ciphertext.\r\n * @property {WordArray} iv The IV used in the ciphering operation.\r\n * @property {WordArray} salt The salt used with a key derivation function.\r\n * @property {Cipher} algorithm The cipher algorithm.\r\n * @property {Mode} mode The block mode used in the ciphering operation.\r\n * @property {Padding} padding The padding scheme used in the ciphering operation.\r\n * @property {number} blockSize The block size of the cipher.\r\n * @property {Format} formatter\r\n *    The default formatting strategy to convert this cipher params object to a string.\r\n */\r\nexport default class CipherParams extends Base {\r\n  /**\r\n     * Initializes a newly created cipher params object.\r\n     *\r\n     * @param {Object} cipherParams An object with any of the possible cipher parameters.\r\n     *\r\n     * @example\r\n     *\r\n     *     var cipherParams = CryptoJS.lib.CipherParams.create({\r\n     *         ciphertext: ciphertextWordArray,\r\n     *         key: keyWordArray,\r\n     *         iv: ivWordArray,\r\n     *         salt: saltWordArray,\r\n     *         algorithm: CryptoJS.algo.AES,\r\n     *         mode: CryptoJS.mode.CBC,\r\n     *         padding: CryptoJS.pad.PKCS7,\r\n     *         blockSize: 4,\r\n     *         formatter: CryptoJS.format.OpenSSL\r\n     *     });\r\n     */\r\n  constructor(cipherParams) {\r\n    super();\r\n\r\n    this.mixIn(cipherParams);\r\n  }\r\n\r\n  /**\r\n     * Converts this cipher params object to a string.\r\n     *\r\n     * @param {Format} formatter (Optional) The formatting strategy to use.\r\n     *\r\n     * @return {string} The stringified cipher params.\r\n     *\r\n     * @throws Error If neither the formatter nor the default formatter is set.\r\n     *\r\n     * @example\r\n     *\r\n     *     var string = cipherParams + '';\r\n     *     var string = cipherParams.toString();\r\n     *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);\r\n     */\r\n  toString(formatter) {\r\n    return (formatter || this.formatter).stringify(this);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}