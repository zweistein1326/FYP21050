{"ast":null,"code":"var _jsxFileName = \"/Users/sid/Desktop/SSOB/sso/client/src/pages/Login.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { Avatar, Button, Box, Checkbox, Container, TextField, FormControlLabel, Link, Grid, Typography } from '@mui/material';\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\nimport { useMutation } from '@apollo/client';\nimport { useNavigate } from 'react-router-dom';\nimport { LOGIN } from '../graphql';\nimport { connect } from 'react-redux';\nimport { login } from '../actions/auth';\nimport { privateEncrypt } from 'crypto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Login = props => {\n  _s();\n\n  const navigate = useNavigate();\n  const [message, setMessage] = useState('');\n  const [submitLogin, {\n    loading,\n    error\n  }] = useMutation(LOGIN);\n\n  const handleSubmit = event => {\n    var _data$get;\n\n    event.preventDefault();\n    const data = new FormData(event.currentTarget);\n    const password = ((_data$get = data.get('password')) === null || _data$get === void 0 ? void 0 : _data$get.toString()) || '';\n    const privateKey = localStorage.getItem('privateKey') || '';\n    const newPass = privateEncrypt(privateKey, Buffer.from(password, 'utf8')).toString('base64');\n    console.log(newPass);\n    const payload = {\n      email: data.get('email'),\n      password: encpass\n    };\n    submitLogin({\n      variables: {\n        input: payload\n      }\n    }).then(res => {\n      const {\n        status,\n        token,\n        message,\n        user\n      } = res.data.login;\n\n      if (status === 'success') {\n        props.login(user);\n        localStorage.setItem('token', token);\n        navigate(`/user/${user.id}`);\n      } else {\n        setMessage(message);\n      }\n    }).catch(err => {\n      console.error(err);\n      if (error) setMessage(error.message);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    component: \"main\",\n    maxWidth: \"xs\",\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        marginTop: 8,\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Avatar, {\n        sx: {\n          m: 1,\n          bgcolor: 'secondary.main'\n        },\n        children: /*#__PURE__*/_jsxDEV(LockOutlinedIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        component: \"h1\",\n        variant: \"h5\",\n        children: \"Sign in\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), message && /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        color: \"red\",\n        sx: {\n          mt: 2\n        },\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        component: \"form\",\n        onSubmit: handleSubmit,\n        noValidate: true,\n        sx: {\n          mt: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          margin: \"normal\",\n          required: true,\n          fullWidth: true,\n          id: \"email\",\n          label: \"Email Address\",\n          name: \"email\",\n          autoComplete: \"email\",\n          autoFocus: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          margin: \"normal\",\n          required: true,\n          fullWidth: true,\n          name: \"password\",\n          label: \"Password\",\n          type: \"password\",\n          id: \"password\",\n          autoComplete: \"current-password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n          control: /*#__PURE__*/_jsxDEV(Checkbox, {\n            value: \"remember\",\n            color: \"primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 22\n          }, this),\n          label: \"Remember me\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          fullWidth: true,\n          variant: \"contained\",\n          sx: {\n            mt: 3,\n            mb: 2\n          },\n          disabled: loading,\n          children: \"Sign In\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: true,\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              href: \"#\",\n              variant: \"body2\",\n              children: \"Forgot password?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              href: \"/register\",\n              variant: \"body2\",\n              children: \"Don't have an account? Sign Up\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Login, \"Vm3Gmz2FYUV6Y85j3ivP7suVylY=\", false, function () {\n  return [useNavigate, useMutation];\n});\n\n_c = Login;\n\nconst mapDispatchToProps = dispatch => ({\n  login: userData => dispatch(login(userData)) // logout: () => dispatch(logout())\n\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/Users/sid/Desktop/SSOB/sso/client/src/pages/Login.tsx"],"names":["useState","Avatar","Button","Box","Checkbox","Container","TextField","FormControlLabel","Link","Grid","Typography","LockOutlinedIcon","useMutation","useNavigate","LOGIN","connect","login","privateEncrypt","Login","props","navigate","message","setMessage","submitLogin","loading","error","handleSubmit","event","preventDefault","data","FormData","currentTarget","password","get","toString","privateKey","localStorage","getItem","newPass","Buffer","from","console","log","payload","email","encpass","variables","input","then","res","status","token","user","setItem","id","catch","err","marginTop","display","flexDirection","alignItems","m","bgcolor","mt","mb","mapDispatchToProps","dispatch","userData"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport {\n  Avatar,\n  Button,\n  Box,\n  Checkbox,\n  Container,\n  TextField,\n  FormControlLabel,\n  Link,\n  Grid,\n  Typography,\n} from '@mui/material';\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\nimport { useMutation } from '@apollo/client';\nimport { useNavigate } from 'react-router-dom';\nimport { LOGIN } from '../graphql';\nimport {connect} from 'react-redux';\nimport { login } from '../actions/auth';\nimport { User } from '../models/User';\nimport { privateEncrypt } from 'crypto';\n\n\nconst Login = (props:any) => {\n  const navigate = useNavigate();\n  const [message, setMessage] = useState<string>('');\n  const [submitLogin, { loading, error }] = useMutation(LOGIN);\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const data = new FormData(event.currentTarget);\n    const password:string = data.get('password')?.toString() || '';\n\n    const privateKey:string = localStorage.getItem('privateKey') || '';\n\n    const newPass:string = privateEncrypt(privateKey, Buffer.from(password,'utf8')).toString('base64');\n    \n    console.log(newPass);\n\n    const payload = {\n      email: data.get('email'),\n      password: encpass,\n    };\n\n    submitLogin({\n      variables: {\n        input: payload,\n      },\n    })\n      .then((res) => {\n        const { status, token, message, user } = res.data.login;\n        if (status === 'success') {\n          props.login(user)\n          localStorage.setItem('token', token);\n          navigate(`/user/${user.id}`);\n        } else {\n          setMessage(message);\n        }\n      })\n      .catch((err) => {\n        console.error(err);\n        if (error) setMessage(error.message);\n      });\n  };\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <Box\n        sx={{\n          marginTop: 8,\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n        }}\n      >\n        <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign in\n        </Typography>\n        {message && (\n          <Typography variant=\"body1\" color=\"red\" sx={{ mt: 2 }}>\n            {message}\n          </Typography>\n        )}\n        <Box component=\"form\" onSubmit={handleSubmit} noValidate sx={{ mt: 1 }}>\n          <TextField\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"email\"\n            label=\"Email Address\"\n            name=\"email\"\n            autoComplete=\"email\"\n            autoFocus\n          />\n          <TextField\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"password\"\n            label=\"Password\"\n            type=\"password\"\n            id=\"password\"\n            autoComplete=\"current-password\"\n          />\n          <FormControlLabel\n            control={<Checkbox value=\"remember\" color=\"primary\" />}\n            label=\"Remember me\"\n          />\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            sx={{ mt: 3, mb: 2 }}\n            disabled={loading}\n          >\n            Sign In\n          </Button>\n          <Grid container>\n            <Grid item xs>\n              <Link href=\"#\" variant=\"body2\">\n                Forgot password?\n              </Link>\n            </Grid>\n            <Grid item>\n              <Link href=\"/register\" variant=\"body2\">\n                {\"Don't have an account? Sign Up\"}\n              </Link>\n            </Grid>\n          </Grid>\n        </Box>\n      </Box>\n    </Container>\n  );\n};\n\nconst mapDispatchToProps = (dispatch:any)=> ({\n  login: (userData:User) => dispatch(login(userData)),\n  // logout: () => dispatch(logout())\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n"]},"metadata":{},"sourceType":"module"}