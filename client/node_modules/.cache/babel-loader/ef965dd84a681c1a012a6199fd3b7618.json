{"ast":null,"code":"var _jsxFileName = \"/Users/sid/Desktop/SSOB/sso/client/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { ApolloProvider, ApolloClient, InMemoryCache } from '@apollo/client';\nimport { RestLink } from 'apollo-link-rest';\nimport { useEffect } from 'react';\nimport { Provider } from 'react-redux';\nimport configureStore from './store/configureStore';\nimport AppRouter from './routers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst restLink = new RestLink({\n  uri: '/api'\n});\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: restLink\n});\nconst {\n  ethereum\n} = window;\n\nconst connectWalletHandler = async () => {\n  try {\n    const accounts = await ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n    console.log('account', accounts[0]);\n    console.log(\"Wallet exists! We're ready to go!\");\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const store = configureStore();\nconst auth = store.getState().auth;\nconsole.log(auth);\n\nfunction App() {\n  _s();\n\n  useEffect(() => {\n    connectWalletHandler();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ApolloProvider, {\n    client: client,\n    children: /*#__PURE__*/_jsxDEV(Provider, {\n      store: store,\n      children: /*#__PURE__*/_jsxDEV(AppRouter, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/sid/Desktop/SSOB/sso/client/src/App.tsx"],"names":["ApolloProvider","ApolloClient","InMemoryCache","RestLink","useEffect","Provider","configureStore","AppRouter","restLink","uri","client","cache","link","ethereum","window","connectWalletHandler","accounts","request","method","console","log","err","store","auth","getState","App"],"mappings":";;;AACA,SAASA,cAAT,EAAyBC,YAAzB,EAAuCC,aAAvC,QAA4D,gBAA5D;AACA,SAASC,QAAT,QAAyB,kBAAzB;AAKA,SAASC,SAAT,QAA0B,OAA1B;AAEA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,cAAP,MAA2B,wBAA3B;AACA,OAAOC,SAAP,MAAsB,WAAtB;;AAKA,MAAMC,QAAQ,GAAG,IAAIL,QAAJ,CAAa;AAAEM,EAAAA,GAAG,EAAE;AAAP,CAAb,CAAjB;AAEA,MAAMC,MAAM,GAAG,IAAIT,YAAJ,CAAiB;AAC9BU,EAAAA,KAAK,EAAE,IAAIT,aAAJ,EADuB;AAE9BU,EAAAA,IAAI,EAAEJ;AAFwB,CAAjB,CAAf;AAKA,MAAM;AAACK,EAAAA;AAAD,IAAaC,MAAnB;;AAEA,MAAMC,oBAAoB,GAAG,YAAY;AACvC,MAAG;AACD,UAAMC,QAAQ,GAAG,MAAMH,QAAQ,CAACI,OAAT,CAAiB;AAACC,MAAAA,MAAM,EAAE;AAAT,KAAjB,CAAvB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBJ,QAAQ,CAAC,CAAD,CAA/B;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ;AACD,GAJD,CAIE,OAAMC,GAAN,EAAU;AACVF,IAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AACD;AACF,CARD;;AAUA,OAAO,MAAMC,KAAK,GAAGhB,cAAc,EAA5B;AACP,MAAMiB,IAAI,GAAGD,KAAK,CAACE,QAAN,GAAiBD,IAA9B;AACAJ,OAAO,CAACC,GAAR,CAAYG,IAAZ;;AAGA,SAASE,GAAT,GAAe;AAAA;;AAEbrB,EAAAA,SAAS,CAAC,MAAI;AACZW,IAAAA,oBAAoB;AACrB,GAFQ,EAEP,EAFO,CAAT;AAIA,sBACE,QAAC,cAAD;AAAgB,IAAA,MAAM,EAAEL,MAAxB;AAAA,2BACE,QAAC,QAAD;AAAU,MAAA,KAAK,EAAEY,KAAjB;AAAA,6BACE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GAbQG,G;;KAAAA,G;AAeT,eAAeA,GAAf","sourcesContent":["import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport { ApolloProvider, ApolloClient, InMemoryCache } from '@apollo/client';\nimport { RestLink } from 'apollo-link-rest';\nimport Login from './pages/Login';\nimport Home from './pages/Home';\nimport Register from './pages/Register';\nimport CredentialPage from './pages/CredentialPage';\nimport { useEffect } from 'react';\nimport AddCredential from './pages/AddCredential';\nimport { Provider } from 'react-redux';\nimport configureStore from './store/configureStore';\nimport AppRouter from './routers';\n\n\ndeclare var window: any;\n\nconst restLink = new RestLink({ uri: '/api' });\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: restLink,\n});\n\nconst {ethereum} = window;\n\nconst connectWalletHandler = async () => {\n  try{\n    const accounts = await ethereum.request({method: 'eth_requestAccounts'});\n    console.log('account', accounts[0]);\n    console.log(\"Wallet exists! We're ready to go!\");\n  } catch(err){\n    console.log(err);\n  }\n}\n\nexport const store = configureStore();\nconst auth = store.getState().auth\nconsole.log(auth);\n\n\nfunction App() {\n\n  useEffect(()=>{\n    connectWalletHandler();\n  },[])\n\n  return (\n    <ApolloProvider client={client}>\n      <Provider store={store}>\n        <AppRouter/>\n      </Provider>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}